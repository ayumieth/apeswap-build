{"version":3,"sources":["views/Pools/components/styles.ts","components/ListViewMenu/SearchInput.tsx","components/ListViewMenu/constants.ts","components/ListViewMenu/index.tsx","components/ApyCalculator/ApyCalculatorModal.tsx","components/ApyCalculator/ApyButton.tsx","views/JungleFarms/components/Actions/styles.ts","views/JungleFarms/components/styles.ts","views/JungleFarms/components/Actions/ApprovalAction.tsx","views/JungleFarms/components/Modals/DepositModal.tsx","views/JungleFarms/components/Modals/WithdrawModal.tsx","views/JungleFarms/components/Actions/StakeActions.tsx","views/JungleFarms/components/Actions/index.tsx","views/JungleFarms/components/Actions/HarvestAction.tsx","views/JungleFarms/InfoContent.tsx","views/JungleFarms/components/DisplayJungleFarms.tsx","views/JungleFarms/components/Actions/HarvestAll.tsx","views/JungleFarms/JungleFarms.tsx","utils/getTimePeriods.ts","components/ModalInput/ModalInput.tsx","views/Farms/components/styles.ts","components/ListViewMenu/MenuTabButtons/index.tsx","components/ListViewMenu/styles.ts","../node_modules/lodash/partition.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js"],"names":["poolStyles","styledBtn","borderRadius","fontSize","fontWeight","padding","minWidth","height","width","container","position","actionContainer","justifyContent","StyledTag","styled","ArrowDropUpIcon","Tag","StyledInput","Input","theme","colors","white3","InputWrapper","div","mediaQueries","sm","md","Container","SearchInput","value","onChange","useState","toggled","setToggled","inputEl","useRef","ref","onBlur","icon","OPTIONS","label","JUNGLE_OPTIONS","ListViewMenu","onHandleQueryChange","onSetSortOption","onSetStake","harvestAll","stakedOnly","query","showMonkeyImage","activeOption","displayOptions","isJungle","isDark","useTheme","t","useTranslation","bold","mr","style","size","e","target","active","map","option","MenuTabButtons","onClick","checked","src","alt","React","memo","Grid","GridItem","Description","Text","ApyCalculatorModal","onDismiss","lpLabel","rewardTokenName","rewardTokenPrice","apy","addLiquidityUrl","farmApy","BigNumber","times","toNumber","oneThousandDollarsWorthOfBanana","bananaEarnedPerThousand1D","calculateBananaEarnedPerThousandDollars","numberOfDays","bananaEarnedPerThousand7D","bananaEarnedPerThousand30D","bananaEarnedPerThousand365D","title","color","textTransform","mb","apyModalRoi","amountEarned","amountInvested","href","StyledCalculateIcon","CalculateIcon","xs","ApyButton","useModal","onPresentApyModal","ml","cursor","StyledButtonSquare","Button","SmallButtonSquare","ActionContainer","Flex","CenterContainer","StyledButton","ApprovalAction","stakingTokenContractAddress","jungleId","isLoading","useActiveWeb3React","chainId","account","stakingTokenContract","useERC20","pendingTrx","setPendingTrx","dispatch","useAppDispatch","onApprove","useJungleApprove","toastSuccess","useToast","sx","textAlign","className","disabled","a","then","resp","trxHash","transactionHash","text","url","getEtherscanLink","catch","console","error","updateJungleFarmsUserAllowance","load","DepositModal","max","onConfirm","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","currentTarget","handleSelectMax","ModalInput","onSelectMax","symbol","inputTitle","fullWidth","endIcon","spin","WithdrawModal","parseFloat","StakeAction","stakingTokenBalance","stakedBalance","stakeTokenValueUsd","rawStakedBalance","getBalanceNumber","userStakedBalanceUsd","toFixed","pendingDepositTrx","setPendingDepositTrx","pendingWithdrawTrx","setPendingWithdrawTrx","isMobile","useIsMobile","firstStake","gt","onStake","useJungleStake","onUnstake","useJungleUnstake","fetchJungleFarmsUserDataAsync","onPresentDeposit","onPresentWithdraw","ListViewContent","value2","value2Secondary","lineHeight","renderStakingButtons","Actions","allowance","stakeTokenAddress","UnlockButton","table","actionToRender","HarvestAction","earnTokenSymbol","userEarnings","onHarvest","useJungleHarvest","handleHarvest","updateJungleFarmsUserPendingReward","InfoContent","farm","currentBlock","useBlock","timeUntilStart","getTimePeriods","Math","startBlock","BSC_BLOCK_TIME","timeUntilEnd","endBlock","explorerLink","BLOCK_EXPLORER","contractLink","contractAddress","tokenContractLink","rewardToken","address","flexDirection","alignItems","days","hours","minutes","projectLink","mt","twitter","DisplayJungleFarms","jungleFarms","openId","jungleFarmTags","pathname","useLocation","isActive","includes","closeModal","handleClose","onPresentAddLiquidityWidgetModal","jungleFarmsListView","split","token1","token2","totalDollarAmountStaked","round","totalStaked","stakingToken","price","liquidityUrl","lpTokens","token","quoteToken","userAllowance","userData","pendingReward","decimals","userEarningsUsd","userTokenBalance","userTokenBalanceUsd","jTag","find","tag","pid","tagColor","marginRight","marginTop","variant","tokens","token3","stakeLp","id","infoContent","infoContentPosition","ttWidth","toolTipIconWidth","toolTipStyle","open","cardContent","rel","apr","toolTip","toolTipPlacement","toolTipTransform","aprCalculator","toLocaleString","undefined","expandedContent","selectCurrency","field","Field","INPUT","currencyId","OUTPUT","toString","stakedTokenSymbol","ListView","listViews","HarvestAll","jungleIds","onHarvestAll","useJungleHarvestAll","handleHarvestAll","trx","length","JungleFarms","useSetJungleFarms","usePollJungleFarms","setStakedOnly","observerIsSet","setObserverIsSet","searchQuery","setSearchQuery","sortOption","setSortOption","numberOfFarmsVisible","setNumberOfFarmsVisible","useWeb3React","allJungleFarms","useJungleFarms","search","window","location","params","URLSearchParams","urlSearchedFarm","parseInt","get","loadMoreRef","useJungleFarmTags","jungleFarmOrderings","useJungleFarmOrderings","useEffect","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","current","currJungleFarms","isFinished","harvestJungleIds","filter","partition","finishedJungleFarms","openFarms","stakedOnlyFarms","isGreaterThan","stakedInactiveFarms","top","ListViewLayout","Banner","banner","link","listViewBreak","maxWidth","event","chosenJungleFarms","lowercaseQuery","toLowerCase","farmsToSort","orderBy","ordering","order","sortJungleFarms","slice","renderJungleFarms","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","timeLeft","years","months","floor","StyledTokenInput","primaryBright","displayDecimals","isBalanceZero","displayBalance","isWarning","pl","placeholder","FarmButton","NextArrow","Wrapper","lg","xl","MenuTabButton","useRouteMatch","isExact","history","useHistory","labels","push","ControlContainer","white2","MobilePadding","ToggleWrapper","LabelWrapper","StyledText","StyledCheckbox","Checkbox","StyledImage","img","HarvestAllWrapper","Heading","require","createAggregator","result","key","module","exports","arrayAggregator","baseAggregator","baseIteratee","isArray","setter","initializer","collection","iteratee","func","accumulator","array","index","baseEach"],"mappings":"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","file":"static/js/24.78697667.chunk.js","sourcesContent":["import { ArrowDropUpIcon } from '@apeswapfinance/uikit'\nimport { Tag } from '@ape.swap/uikit'\nimport styled from '@emotion/styled'\nimport { ThemeUIStyleObject } from 'theme-ui'\n\nexport const poolStyles: Record<string, ThemeUIStyleObject> = {\n  styledBtn: {\n    borderRadius: '10px',\n    fontSize: '16px',\n    fontWeight: 700,\n    padding: '10px 20px',\n    minWidth: '150px',\n    height: '44px',\n    '&&': {\n      width: '150px',\n    },\n  },\n  container: {\n    position: 'relative',\n  },\n  actionContainer: {\n    width: '100%',\n    justifyContent: 'space-between',\n    '@media screen and (min-width: 852px)': {\n      width: 'fit-content',\n    },\n  },\n}\n\nexport const NextArrow = styled(ArrowDropUpIcon)`\n  transform: rotate(90deg);\n`\n\nexport const StyledTag = styled(Tag)`\n  font-size: 10px;\n  padding: 0px 6px !important;\n  font-weight: 700;\n  border: none;\n  border-radius: 10px;\n  height: auto;\n  width: max-content;\n`\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@apeswapfinance/uikit'\nimport styled from '@emotion/styled'\n\nconst StyledInput = styled(Input)`\n  border-radius: 10px;\n  background: ${({ theme }) => theme.colors.white3};\n  height: 36px;\n  width: 100%;\n  font-weight: 800;\n  border: none;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  width: 140px;\n\n  @media screen and (min-width: 340px) {\n    width: 160px;\n  }\n\n  @media screen and (min-width: 360px) {\n    width: 180px;\n  }\n\n  @media screen and (min-width: 390px) {\n    width: 200px;\n  }\n\n  @media screen and (min-width: 460px) {\n    width: 220px;\n  }\n\n  @media screen and (min-width: 500px) {\n    width: 240px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 244px;\n    display: block;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 220px;\n    display: block;\n  }\n\n  @media screen and (min-width: 900px) {\n    width: 200px;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput ref={inputEl} value={value} onChange={onChange} onBlur={() => setToggled(false)} icon=\"search\" />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","export const NUMBER_OF_FARMS_VISIBLE = 10\n\nexport const OPTIONS = [\n  {\n    label: 'All',\n    value: 'all',\n  },\n  {\n    label: 'Blue Chips',\n    value: 'blueChips',\n  },\n  {\n    label: 'Stables',\n    value: 'stables',\n  },\n  {\n    label: 'APY',\n    value: 'apr',\n  },\n  {\n    label: 'Liquidity',\n    value: 'liquidity',\n  },\n  {\n    label: 'Hot',\n    value: 'hot',\n  },\n  {\n    label: 'New',\n    value: 'new',\n  },\n]\n\nexport const JUNGLE_OPTIONS = [\n  {\n    label: 'All',\n    value: 'all',\n  },\n  {\n    label: 'APR',\n    value: 'apr',\n  },\n  {\n    label: 'Liquidity',\n    value: 'liquidity',\n  },\n  {\n    label: 'Earned',\n    value: 'earned',\n  },\n  {\n    label: 'Hot',\n    value: 'hot',\n  },\n  {\n    label: 'New',\n    value: 'new',\n  },\n]\n\nexport const STABLES = ['DAI', 'USDT', 'BUSD', 'USDC', 'MOR', 'FRAX']\n\nexport const BLUE_CHIPS = [\n  'BTC',\n  'ETH',\n  'USDT',\n  'USDC',\n  'XRP',\n  'LUNA',\n  'SOL',\n  'ADA',\n  'AVAX',\n  'DOT',\n  'BUSD',\n  'DOGE',\n  'SHIB',\n  'MATIC',\n  'CRO',\n  'DAI',\n  'ATOM',\n  'LTC',\n  'LINK',\n  'TRX',\n  'BCH',\n  'BANANA',\n]\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Flex, Select, SelectItem, Text } from '@apeswapfinance/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ListViewProps } from './types'\nimport MenuTabButtons from './MenuTabButtons'\nimport SearchInput from './SearchInput'\nimport {\n  ControlContainer,\n  HarvestAllWrapper,\n  LabelWrapper,\n  MobilePadding,\n  StyledCheckbox,\n  StyledImage,\n  StyledText,\n  ToggleWrapper,\n} from './styles'\nimport { OPTIONS, JUNGLE_OPTIONS } from './constants'\n\nconst ListViewMenu: React.FC<ListViewProps> = ({\n  onHandleQueryChange,\n  onSetSortOption,\n  onSetStake,\n  harvestAll,\n  stakedOnly,\n  query,\n  showMonkeyImage,\n  activeOption,\n  isJungle,\n}) => {\n  const displayOptions = isJungle === true ? JUNGLE_OPTIONS : OPTIONS\n  const { isDark } = useTheme()\n  const { t } = useTranslation()\n  return (\n    <ControlContainer>\n      <MobilePadding>\n        <LabelWrapper>\n          <StyledText bold mr=\"15px\">\n            {t('Search')}\n          </StyledText>\n          <SearchInput onChange={onHandleQueryChange} value={query} />\n        </LabelWrapper>\n      </MobilePadding>\n      <MobilePadding>\n        <Flex style={{ height: '40px' }}>\n          <Select size=\"sm\" width=\"126px\" onChange={(e) => onSetSortOption(e.target.value)} active={activeOption}>\n            {displayOptions.map((option) => {\n              return (\n                <SelectItem size=\"sm\" value={option.value} key={option?.label}>\n                  <Text>{t(option.label)}</Text>\n                </SelectItem>\n              )\n            })}\n          </Select>\n        </Flex>\n      </MobilePadding>\n      <MobilePadding>\n        <MenuTabButtons />\n      </MobilePadding>\n      <MobilePadding>\n        <ToggleWrapper onClick={() => onSetStake(!stakedOnly)}>\n          <StyledCheckbox checked={stakedOnly} onChange={() => onSetStake(!stakedOnly)} />\n          <StyledText> {t('Staked')} </StyledText>\n        </ToggleWrapper>\n      </MobilePadding>\n      <MobilePadding>{harvestAll && <HarvestAllWrapper> {harvestAll} </HarvestAllWrapper>}</MobilePadding>\n      {showMonkeyImage && isDark ? (\n        <StyledImage src=\"/images/farm-night-farmer.svg\" alt=\"night-monkey\" />\n      ) : (\n        <StyledImage src=\"/images/farm-day-farmer.svg\" alt=\"day-monkey\" />\n      )}\n    </ControlContainer>\n  )\n}\n\nexport default React.memo(ListViewMenu)\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@apeswapfinance/uikit'\n\nimport { calculateBananaEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  rewardTokenName?: string\n  rewardTokenPrice?: number\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: 10px;\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  rewardTokenName,\n  rewardTokenPrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const farmApy = new BigNumber(apy).times(new BigNumber(100)).toNumber()\n  const tokenPrice =\n    typeof rewardTokenPrice === 'number' ? rewardTokenPrice : new BigNumber(rewardTokenPrice).toNumber()\n  const oneThousandDollarsWorthOfBanana = 1000 / tokenPrice\n\n  const bananaEarnedPerThousand1D = calculateBananaEarnedPerThousandDollars({\n    numberOfDays: 1,\n    farmApy,\n    rewardTokenPrice,\n  })\n  const bananaEarnedPerThousand7D = calculateBananaEarnedPerThousandDollars({\n    numberOfDays: 7,\n    farmApy,\n    rewardTokenPrice,\n  })\n  const bananaEarnedPerThousand30D = calculateBananaEarnedPerThousandDollars({\n    numberOfDays: 30,\n    farmApy,\n    rewardTokenPrice,\n  })\n  const bananaEarnedPerThousand365D = calculateBananaEarnedPerThousandDollars({\n    numberOfDays: 365,\n    farmApy,\n    rewardTokenPrice,\n  })\n\n  return (\n    <Modal onDismiss={onDismiss} title={t('CURRENT RATES')}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" color=\"gray\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" color=\"gray\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Return')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" color=\"gray\" textTransform=\"uppercase\" mb=\"20px\">\n            {rewardTokenName}\n            {t(' per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('1d')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: bananaEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfBanana })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{bananaEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('7d')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: bananaEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfBanana })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{bananaEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('30d')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: bananaEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfBanana })}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{bananaEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>{`${t('365d')}${t('')}`}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({\n              amountEarned: bananaEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfBanana,\n            })}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{bananaEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"gray\">\n        {t(\n          'Returns are calculated based on current rates, assuming daily compounding. Estimated returns are not guaranteed and are provided for convenience only.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {t('Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CalculateIcon, useModal } from '@apeswapfinance/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  rewardTokenName?: string\n  rewardTokenPrice?: number\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst StyledCalculateIcon = styled(CalculateIcon)`\n  width: 13px;\n  height: 13px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 15px;\n    height: 15px;\n  }\n`\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, rewardTokenPrice, apy, addLiquidityUrl, rewardTokenName }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      rewardTokenName={rewardTokenName}\n      rewardTokenPrice={rewardTokenPrice}\n      apy={apy}\n      addLiquidityUrl={addLiquidityUrl}\n    />,\n  )\n\n  return (\n    <>\n      <StyledCalculateIcon onClick={onPresentApyModal} color=\"yellow\" ml=\"3px\" style={{ cursor: 'pointer' }} />\n    </>\n  )\n}\n\nexport default ApyButton\n","import { Button, Flex } from '@ape.swap/uikit'\nimport styled from '@emotion/styled'\n\nexport const StyledButtonSquare = styled(Button)<{ height?: number; minWidth?: number }>`\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 700;\n  padding: 10px 20px;\n  min-width: ${({ minWidth }) => minWidth || 227}px;\n  height: ${({ height }) => height || 44}px;\n`\n\nexport const SmallButtonSquare = styled(Button)`\n  max-width: 44px;\n  height: 44px;\n`\n\nexport const ActionContainer = styled(Flex)`\n  width: 100%;\n  justify-content: space-between;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: auto;\n    min-width: 225px;\n  }\n`\n\nexport const CenterContainer = styled(Flex)`\n  width: 100%;\n  justify-content: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: auto;\n    justify-content: auto;\n  }\n`\n","import { ArrowDropUpIcon } from '@apeswapfinance/uikit'\nimport { Button, Flex } from '@ape.swap/uikit'\nimport styled from '@emotion/styled'\n\nexport const StyledButton = styled(Button)`\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 700;\n  padding: 10px 20px;\n  min-width: 129px;\n  height: 44px;\n`\n\nexport const NextArrow = styled(ArrowDropUpIcon)`\n  transform: rotate(90deg);\n`\n\nexport const Container = styled(Flex)`\n  flex-direction: row;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  margin-top: 20px;\n`\n\nexport const ActionContainer = styled(Flex)`\n  width: 100%;\n  justify-content: space-between;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: fit-content;\n  }\n`\n","import React, { useState } from 'react'\nimport { Skeleton } from '@apeswapfinance/uikit'\nimport { useJungleApprove } from 'hooks/useApprove'\nimport { useERC20 } from 'hooks/useContract'\nimport { useAppDispatch } from 'state'\nimport { updateJungleFarmsUserAllowance } from 'state/jungleFarms'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useToast } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { StyledButton } from '../styles'\n\ninterface ApprovalActionProps {\n  stakingTokenContractAddress: string\n  jungleId: number\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({\n  stakingTokenContractAddress,\n  jungleId,\n  isLoading = false,\n}) => {\n  const { chainId, account } = useActiveWeb3React()\n  const stakingTokenContract = useERC20(stakingTokenContractAddress)\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useJungleApprove(stakingTokenContract, jungleId)\n  const { toastSuccess } = useToast()\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <StyledButton\n          sx={{ minWidth: '227px', width: '227px', textAlign: 'center' }}\n          className=\"noClick\"\n          disabled={pendingTrx}\n          onClick={async () => {\n            setPendingTrx(true)\n            await onApprove()\n              .then((resp) => {\n                const trxHash = resp.transactionHash\n                toastSuccess(t('Approve Successful'), {\n                  text: t('View Transaction'),\n                  url: getEtherscanLink(trxHash, 'transaction', chainId),\n                })\n              })\n              .catch((e) => {\n                console.error(e)\n                setPendingTrx(false)\n              })\n            dispatch(updateJungleFarmsUserAllowance(chainId, jungleId, account))\n\n            setPendingTrx(false)\n          }}\n          load={pendingTrx}\n        >\n          {t('ENABLE')}\n        </StyledButton>\n      )}\n    </>\n  )\n}\n\nexport default React.memo(ApprovalAction)\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon, ModalFooter } from '@apeswapfinance/uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DepositModalProps {\n  max: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(new BigNumber(max))\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${t('Stake LP Tokens')}`} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalFooter onDismiss={onDismiss}>\n        <Button\n          fullWidth\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              console.error('Transaction Failed')\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          endIcon={pendingTx && <AutoRenewIcon spin color=\"currentColor\" />}\n          style={{\n            borderRadius: '10px',\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default React.memo(DepositModal)\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon, ModalFooter } from '@apeswapfinance/uikit'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(new BigNumber(max))\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalFooter onDismiss={onDismiss} t={t}>\n        <Button\n          disabled={pendingTx || parseFloat(fullBalance) < parseFloat(val)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              console.error('Transaction Failed')\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          fullWidth\n          endIcon={pendingTx && <AutoRenewIcon spin color=\"currentColor\" />}\n          style={{\n            borderRadius: '10px',\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default React.memo(WithdrawModal)\n","import React, { useState } from 'react'\nimport { Flex, AddIcon, MinusIcon, useModal } from '@apeswapfinance/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useJungleStake } from 'hooks/useStake'\nimport { fetchJungleFarmsUserDataAsync } from 'state/jungleFarms'\nimport { useJungleUnstake } from 'hooks/useUnstake'\nimport useIsMobile from 'hooks/useIsMobile'\nimport { useToast } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ListViewContent from 'components/ListViewContent'\nimport { useTranslation } from 'contexts/Localization'\nimport DepositModal from '../Modals/DepositModal'\nimport WithdrawModal from '../Modals/WithdrawModal'\nimport { ActionContainer, CenterContainer, SmallButtonSquare, StyledButtonSquare } from './styles'\n\ninterface StakeActionsProps {\n  stakingTokenBalance: string\n  stakedBalance: string\n  stakeTokenValueUsd: number\n  jungleId: number\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  stakingTokenBalance,\n  stakedBalance,\n  stakeTokenValueUsd,\n  jungleId,\n}) => {\n  const rawStakedBalance = getBalanceNumber(new BigNumber(stakedBalance))\n  const dispatch = useAppDispatch()\n  const { chainId, account } = useActiveWeb3React()\n  const userStakedBalanceUsd = `$${(\n    getBalanceNumber(new BigNumber(stakedBalance) || new BigNumber(0)) * stakeTokenValueUsd\n  ).toFixed(2)}`\n  const [pendingDepositTrx, setPendingDepositTrx] = useState(false)\n  const [pendingWithdrawTrx, setPendingWithdrawTrx] = useState(false)\n\n  const { toastSuccess } = useToast()\n  const isMobile = useIsMobile()\n  const firstStake = !new BigNumber(stakedBalance)?.gt(0)\n\n  const { onStake } = useJungleStake(jungleId)\n  const { onUnstake } = useJungleUnstake(jungleId)\n  const { t } = useTranslation()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingTokenBalance}\n      onConfirm={async (val) => {\n        setPendingDepositTrx(true)\n        await onStake(val)\n          .then((resp) => {\n            const trxHash = resp.transactionHash\n            toastSuccess(t('Deposit Successful'), {\n              text: t('View Transaction'),\n              url: getEtherscanLink(trxHash, 'transaction', chainId),\n            })\n          })\n          .catch((e) => {\n            console.error(e)\n            setPendingDepositTrx(false)\n          })\n        dispatch(fetchJungleFarmsUserDataAsync(chainId, account))\n        setPendingDepositTrx(false)\n      }}\n    />,\n  )\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={async (val) => {\n        setPendingWithdrawTrx(true)\n        await onUnstake(val)\n          .then((resp) => {\n            const trxHash = resp.transactionHash\n            toastSuccess(t('Withdraw Successful'), {\n              text: t('View Transaction'),\n              url: getEtherscanLink(trxHash, 'transaction', chainId),\n            })\n          })\n          .catch((e) => {\n            console.error(e)\n            setPendingWithdrawTrx(false)\n          })\n        dispatch(fetchJungleFarmsUserDataAsync(chainId, account))\n        setPendingWithdrawTrx(false)\n      }}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    if (firstStake) {\n      return (\n        <CenterContainer>\n          <StyledButtonSquare onClick={onPresentDeposit} load={pendingDepositTrx} disabled={pendingDepositTrx}>\n            {t('DEPOSIT')}\n          </StyledButtonSquare>\n        </CenterContainer>\n      )\n    }\n    return (\n      <ActionContainer style={{ minWidth: 'auto' }}>\n        {isMobile && (\n          <ListViewContent\n            title={`${t('Staked LP')}`}\n            value={rawStakedBalance > 0 && rawStakedBalance.toFixed(2) === '0.00' ? '> 0' : rawStakedBalance.toFixed(2)}\n            value2={userStakedBalanceUsd}\n            value2Secondary\n            width={100}\n            height={50}\n            lineHeight={15}\n            ml={10}\n          />\n        )}\n        <Flex>\n          <SmallButtonSquare\n            onClick={onPresentWithdraw}\n            load={pendingWithdrawTrx}\n            disabled={pendingWithdrawTrx}\n            mr=\"6px\"\n            size=\"sm\"\n          >\n            <MinusIcon color=\"white\" width=\"20px\" height=\"20px\" fontWeight={700} />\n          </SmallButtonSquare>\n          <SmallButtonSquare\n            onClick={onPresentDeposit}\n            load={pendingDepositTrx}\n            disabled={pendingDepositTrx || !new BigNumber(stakingTokenBalance)?.gt(0)}\n            size=\"sm\"\n          >\n            <AddIcon color=\"white\" width=\"25px\" height=\"25px\" fontWeight={700} />\n          </SmallButtonSquare>\n        </Flex>\n        {!isMobile && (\n          <ListViewContent\n            title={`${t('Staked LP')}`}\n            value={rawStakedBalance > 0 && rawStakedBalance.toFixed(2) === '0.00' ? '> 0' : rawStakedBalance.toFixed(2)}\n            value2={userStakedBalanceUsd}\n            value2Secondary\n            width={100}\n            height={50}\n            lineHeight={15}\n            ml={10}\n          />\n        )}\n      </ActionContainer>\n    )\n  }\n\n  return renderStakingButtons()\n}\n\nexport default React.memo(StakeAction)\n","import React from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport BigNumber from 'bignumber.js'\nimport { CenterContainer } from './styles'\nimport ApprovalAction from './ApprovalAction'\nimport StakeAction from './StakeActions'\nimport UnlockButton from '../../../../components/UnlockButton'\n\n// Changed props to type string because BigNumbers cause re-renders\n\ninterface CardActionProps {\n  allowance: string\n  stakingTokenBalance: string\n  stakedTokenSymbol: string\n  stakedBalance: string\n  stakeTokenValueUsd: number\n  stakeTokenAddress: string\n  jungleId: number\n}\n\nconst Actions: React.FC<CardActionProps> = ({\n  allowance,\n  stakingTokenBalance,\n  stakedBalance,\n  stakeTokenValueUsd,\n  stakeTokenAddress,\n  jungleId,\n}) => {\n  const { account } = useActiveWeb3React()\n  const actionToRender = () => {\n    if (!account) {\n      return (\n        <CenterContainer>\n          <UnlockButton table />\n        </CenterContainer>\n      )\n    }\n    if (!new BigNumber(allowance)?.gt(0)) {\n      return (\n        <CenterContainer>\n          <ApprovalAction stakingTokenContractAddress={stakeTokenAddress} jungleId={jungleId} />\n        </CenterContainer>\n      )\n    }\n    return (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        stakingTokenBalance={stakingTokenBalance}\n        stakeTokenValueUsd={stakeTokenValueUsd}\n        jungleId={jungleId}\n      />\n    )\n  }\n  return actionToRender()\n}\n\nexport default React.memo(Actions)\n","import React, { useState } from 'react'\nimport { useJungleHarvest } from 'hooks/useHarvest'\nimport useIsMobile from 'hooks/useIsMobile'\nimport { useToast } from 'state/hooks'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { updateJungleFarmsUserPendingReward } from 'state/jungleFarms'\nimport ListViewContent from 'components/ListViewContent'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { StyledButton } from '../styles'\nimport { ActionContainer } from './styles'\n\ninterface HarvestActionsProps {\n  jungleId: number\n  userEarnings: number\n  earnTokenSymbol: string\n  disabled: boolean\n}\n\nconst HarvestAction: React.FC<HarvestActionsProps> = ({ jungleId, earnTokenSymbol, disabled, userEarnings }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onHarvest } = useJungleHarvest(jungleId)\n\n  const { toastSuccess } = useToast()\n  const isMobile = useIsMobile()\n  const { t } = useTranslation()\n\n  const handleHarvest = async () => {\n    setPendingTrx(true)\n    await onHarvest()\n      .then((resp) => {\n        const trxHash = resp.transactionHash\n        toastSuccess(t('Harvest Successful'), {\n          text: t('View Transaction'),\n          url: getEtherscanLink(trxHash, 'transaction', chainId),\n        })\n      })\n      .catch((e) => {\n        console.error(e)\n        setPendingTrx(false)\n      })\n    dispatch(updateJungleFarmsUserPendingReward(chainId, jungleId, account))\n    setPendingTrx(false)\n  }\n\n  return (\n    <ActionContainer>\n      {isMobile && (\n        <ListViewContent\n          title={`${t('Earned')} ${earnTokenSymbol}`}\n          value={userEarnings?.toFixed(4)}\n          width={100}\n          height={50}\n          ml={10}\n        />\n      )}\n      <StyledButton\n        disabled={disabled || pendingTrx}\n        onClick={handleHarvest}\n        load={pendingTrx}\n        style={{ minWidth: isMobile && jungleId === 0 && '100px', width: isMobile && jungleId === 0 && '100px' }}\n      >\n        {t('HARVEST')}\n      </StyledButton>\n      {!isMobile && (\n        <ListViewContent\n          title={`${t('Earned')} ${earnTokenSymbol}`}\n          value={userEarnings?.toFixed(4)}\n          width={150}\n          height={50}\n          ml={10}\n        />\n      )}\n    </ActionContainer>\n  )\n}\n\nexport default React.memo(HarvestAction)\n","import React from 'react'\nimport { Flex, Text, LinkExternal } from '@apeswapfinance/uikit'\nimport { JungleFarm } from 'state/types'\nimport { useBlock } from 'state/block/hooks'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { BLOCK_EXPLORER } from 'config/constants/chains'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\n\nconst InfoContent: React.FC<{ farm: JungleFarm }> = ({ farm }) => {\n  const { chainId } = useActiveWeb3React()\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n  const timeUntilStart = getTimePeriods(Math.max(farm?.startBlock - currentBlock, 0) * BSC_BLOCK_TIME, true)\n  const timeUntilEnd = getTimePeriods(Math.max(farm?.endBlock - currentBlock, 0) * BSC_BLOCK_TIME, true)\n  const explorerLink = BLOCK_EXPLORER[chainId]\n  const contractLink = `${explorerLink}/address/${farm?.contractAddress[chainId]}`\n  const tokenContractLink = `${explorerLink}/address/${farm?.rewardToken?.address[chainId]}`\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        {farm?.endBlock > 0 && farm?.rewardToken?.symbol !== 'BANANA' && (\n          <Flex alignItems=\"space-between\" justifyContent=\"space-between\" style={{ width: '100%' }}>\n            <Text style={{ fontSize: '14px' }}>{farm?.startBlock > currentBlock ? 'Starts in' : 'Ends in'}</Text>\n            <Text style={{ fontSize: '16px' }} bold>\n              {farm?.startBlock > currentBlock\n                ? `${timeUntilStart.days}d, ${timeUntilStart.hours}h, ${timeUntilStart.minutes}m`\n                : `${timeUntilEnd.days}d, ${timeUntilEnd.hours}h, ${timeUntilEnd.minutes}m`}\n            </Text>\n          </Flex>\n        )}\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        {farm?.projectLink && (\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"10px\">\n            <LinkExternal href={farm?.projectLink} style={{ fontSize: '14px' }}>\n              {t('Website')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {farm?.twitter && (\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"10px\">\n            <LinkExternal href={farm?.twitter} style={{ fontSize: '14px' }}>\n              {t('Twitter')}\n            </LinkExternal>\n          </Flex>\n        )}\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\n        <LinkExternal href={tokenContractLink} style={{ fontSize: '14px' }}>\n          {t('View Token Contract')}\n        </LinkExternal>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"15px\">\n        <LinkExternal href={contractLink} style={{ fontSize: '14px' }}>\n          {t('View on BscScan')}\n        </LinkExternal>\n      </Flex>\n    </>\n  )\n}\n\nexport default React.memo(InfoContent)\n","import { IconButton, Text, Flex, TagVariants } from '@ape.swap/uikit'\nimport { Box } from 'theme-ui'\nimport BigNumber from 'bignumber.js'\nimport ListView from 'components/ListView'\nimport { ExtendedListViewProps } from 'components/ListView/types'\nimport ListViewContent from 'components/ListViewContent'\nimport { useLocation } from 'react-router-dom'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ApyButton from 'components/ApyCalculator/ApyButton'\nimport useIsMobile from 'hooks/useIsMobile'\nimport React from 'react'\nimport { JungleFarm, Tag } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { NextArrow } from 'views/Farms/components/styles'\nimport { useTranslation } from 'contexts/Localization'\nimport { useModal } from '@apeswapfinance/uikit'\nimport Actions from './Actions'\nimport HarvestAction from './Actions/HarvestAction'\nimport InfoContent from '../InfoContent'\nimport { Container, StyledButton, ActionContainer } from './styles'\nimport { LiquidityModal } from '../../../components/LiquidityWidget'\nimport { Field, selectCurrency } from '../../../state/swap/actions'\nimport { useAppDispatch } from '../../../state'\nimport { StyledTag } from '../../Pools/components/styles'\n\nconst DisplayJungleFarms: React.FC<{ jungleFarms: JungleFarm[]; openId?: number; jungleFarmTags: Tag[] }> = ({\n  jungleFarms,\n  openId,\n  jungleFarmTags,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const isMobile = useIsMobile()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const isActive = !pathname.includes('history')\n  const dispatch = useAppDispatch()\n\n  // TODO: clean up this code\n  // Hack to get the close modal function from the provider\n  // Need to export ModalContext from uikit to clean up the code\n  const [, closeModal] = useModal(<></>)\n  const [onPresentAddLiquidityWidgetModal] = useModal(\n    <LiquidityModal handleClose={closeModal} />,\n    true,\n    true,\n    'liquidityWidgetModal',\n  )\n\n  const showLiquidity = (token, quoteToken) => {\n    dispatch(\n      selectCurrency({\n        field: Field.INPUT,\n        currencyId: token,\n      }),\n    )\n    dispatch(\n      selectCurrency({\n        field: Field.OUTPUT,\n        currencyId: quoteToken,\n      }),\n    )\n    onPresentAddLiquidityWidgetModal()\n  }\n\n  const jungleFarmsListView = jungleFarms.map((farm) => {\n    const [token1, token2] = farm.tokenName.split('-')\n    const totalDollarAmountStaked = Math.round(getBalanceNumber(farm?.totalStaked) * farm?.stakingToken?.price)\n    const liquidityUrl = `https://apeswap.finance/add/${farm?.lpTokens?.token?.address[chainId]}/${\n      farm?.lpTokens?.quoteToken?.symbol === 'BNB' ? 'ETH' : farm?.lpTokens?.quoteToken?.address[chainId]\n    }`\n    const userAllowance = farm?.userData?.allowance\n    const userEarnings = getBalanceNumber(\n      farm?.userData?.pendingReward || new BigNumber(0),\n      farm?.rewardToken?.decimals,\n    )\n    const userEarningsUsd = `$${(userEarnings * farm.rewardToken?.price).toFixed(2)}`\n    const userTokenBalance = `${getBalanceNumber(farm?.userData?.stakingTokenBalance || new BigNumber(0))?.toFixed(6)}`\n    const userTokenBalanceUsd = `$${(\n      getBalanceNumber(farm?.userData?.stakingTokenBalance || new BigNumber(0)) * farm?.stakingToken?.price\n    ).toFixed(2)}`\n    const jTag = jungleFarmTags?.find((tag) => tag.pid === farm.jungleId)\n    const tagColor = jTag?.color as TagVariants\n\n    return {\n      tag: (\n        <>\n          {jTag?.pid === farm.jungleId && (\n            <Box sx={{ marginRight: '5px', marginTop: ['0px', '2px'] }}>\n              <StyledTag key={jTag?.pid} variant={tagColor}>\n                {jTag?.text}\n              </StyledTag>\n            </Box>\n          )}\n        </>\n      ),\n      tokens: {\n        token1: token1 === 'LC' ? 'LC2' : token1,\n        token2,\n        token3: farm?.rewardToken?.symbol === 'LC' ? 'LC2' : farm?.rewardToken?.symbol,\n      },\n      stakeLp: true,\n      title: <Text bold>{farm?.tokenName}</Text>,\n      id: farm.jungleId,\n      infoContent: <InfoContent farm={farm} />,\n      infoContentPosition: 'translate(8%, 0%)',\n      ttWidth: '250px',\n      toolTipIconWidth: isMobile && '20px',\n      toolTipStyle: isMobile && { marginTop: '10px', marginRight: '10px' },\n      open: openId === farm.jungleId,\n      cardContent: (\n        <>\n          <Flex sx={{ width: '90px', height: '100%', alignItems: 'center', justifyContent: 'space-between' }}>\n            {!isMobile && (\n              <>\n                {farm.projectLink && (\n                  <a href={farm.projectLink} target=\"_blank\" rel=\"noreferrer\">\n                    <IconButton icon=\"website\" color=\"primaryBright\" width={20} style={{ padding: '8.5px 10px' }} />\n                  </a>\n                )}\n                {farm?.twitter && (\n                  <a href={farm?.twitter} target=\"_blank\" rel=\"noreferrer\">\n                    <IconButton icon=\"twitter\" color=\"primaryBright\" width={20} />\n                  </a>\n                )}\n              </>\n            )}\n          </Flex>\n          <ListViewContent\n            title={t('APR')}\n            value={`${isActive ? farm?.apr?.toFixed(2) : '0.00'}%`}\n            width={isMobile ? 95 : 80}\n            height={50}\n            toolTip={t(\n              'APRs are calculated in real time. Note: APRs are provided for your convenience. APRs are constantly changing and do not represent guaranteed returns.',\n            )}\n            toolTipPlacement=\"bottomLeft\"\n            toolTipTransform=\"translate(8%, 0%)\"\n            aprCalculator={\n              <ApyButton\n                lpLabel={farm?.stakingToken?.symbol}\n                rewardTokenName={farm?.rewardToken?.symbol}\n                rewardTokenPrice={farm?.rewardToken?.price}\n                apy={farm?.apr / 100}\n                addLiquidityUrl={liquidityUrl}\n              />\n            }\n          />\n          <ListViewContent\n            title={t('Liquidity')}\n            value={`$${totalDollarAmountStaked.toLocaleString(undefined)}`}\n            width={isMobile ? 160 : 110}\n            height={50}\n            toolTip={t('The total value of the LP tokens currently staked in this farm.')}\n            toolTipPlacement={(isMobile && 'bottomRight') || 'bottomLeft'}\n            toolTipTransform={(isMobile && 'translate(13%, 0%)') || 'translate(23%, 0%)'}\n          />\n          <ListViewContent title={t('Earned')} value={userEarningsUsd} height={50} width={isMobile ? 80 : 150} />\n        </>\n      ),\n      expandedContent: (\n        <>\n          <ActionContainer>\n            {isMobile && (\n              <ListViewContent\n                title={`${t('Available LP')}`}\n                value={userTokenBalance}\n                value2={userTokenBalanceUsd}\n                value2Secondary\n                width={190}\n                height={50}\n                lineHeight={15}\n                ml={10}\n              />\n            )}\n\n            <StyledButton\n              onClick={() =>\n                showLiquidity(\n                  farm?.lpTokens?.token?.address[chainId],\n                  farm?.lpTokens?.quoteToken?.symbol === 'BNB' ? 'ETH' : farm?.lpTokens?.quoteToken?.address[chainId],\n                )\n              }\n            >\n              {t('GET LP')}\n            </StyledButton>\n\n            {!isMobile && (\n              <ListViewContent\n                title={`${t('Available LP')}`}\n                value={userTokenBalance}\n                value2={userTokenBalanceUsd}\n                value2Secondary\n                width={190}\n                height={50}\n                lineHeight={15}\n                ml={10}\n              />\n            )}\n          </ActionContainer>\n          {!isMobile && <NextArrow />}\n          <Actions\n            allowance={userAllowance?.toString()}\n            stakedBalance={farm?.userData?.stakedBalance?.toString()}\n            stakedTokenSymbol={farm?.stakingToken?.symbol}\n            stakingTokenBalance={farm?.userData?.stakingTokenBalance?.toString()}\n            stakeTokenAddress={farm?.stakingToken?.address[chainId]}\n            stakeTokenValueUsd={farm?.stakingToken?.price}\n            jungleId={farm?.jungleId}\n          />\n          {!isMobile && <NextArrow />}\n          <HarvestAction\n            jungleId={farm?.jungleId}\n            disabled={userEarnings <= 0}\n            userEarnings={userEarnings}\n            earnTokenSymbol={farm?.rewardToken?.symbol || farm?.tokenName}\n          />\n        </>\n      ),\n    } as ExtendedListViewProps\n  })\n  return (\n    <Container>\n      <ListView listViews={jungleFarmsListView} />\n    </Container>\n  )\n}\n\nexport default React.memo(DisplayJungleFarms)\n","import React, { useState } from 'react'\nimport { useJungleHarvestAll } from 'hooks/useHarvest'\nimport { useToast } from 'state/hooks'\nimport { fetchJungleFarmsUserDataAsync } from 'state/jungleFarms'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { StyledButtonSquare } from './styles'\n\ninterface HarvestActionsProps {\n  jungleIds: number[]\n  disabled?: boolean\n}\n\nconst HarvestAll: React.FC<HarvestActionsProps> = ({ jungleIds, disabled }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onHarvestAll } = useJungleHarvestAll(jungleIds)\n  const { toastSuccess } = useToast()\n  const { t } = useTranslation()\n\n  const handleHarvestAll = async () => {\n    setPendingTrx(true)\n    await onHarvestAll()\n      .then((resp) => {\n        resp.map((trx) =>\n          toastSuccess(t('Harvest Successful'), {\n            text: t('View Transaction'),\n            url: getEtherscanLink(trx.transactionHash, 'transaction', chainId),\n          }),\n        )\n      })\n      .catch((e) => {\n        console.error(e)\n        setPendingTrx(false)\n      })\n    dispatch(fetchJungleFarmsUserDataAsync(chainId, account))\n    setPendingTrx(false)\n  }\n\n  return (\n    <StyledButtonSquare\n      height={36}\n      minWidth={100}\n      disabled={disabled || pendingTrx || jungleIds.length <= 0}\n      onClick={handleHarvestAll}\n      load={pendingTrx}\n    >\n      {t('HARVEST ALL')} ({jungleIds.length})\n    </StyledButtonSquare>\n  )\n}\n\nexport default React.memo(HarvestAll)\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@apeswapfinance/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBlock } from 'state/block/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport {\n  usePollJungleFarms,\n  useJungleFarms,\n  useSetJungleFarms,\n  useJungleFarmTags,\n  useJungleFarmOrderings,\n} from 'state/jungleFarms/hooks'\nimport ListViewLayout from 'components/layout/ListViewLayout'\nimport Banner from 'components/Banner'\nimport { JungleFarm } from 'state/types'\nimport DisplayJungleFarms from './components/DisplayJungleFarms'\nimport ListViewMenu from '../../components/ListViewMenu'\nimport HarvestAll from './components/Actions/HarvestAll'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\n\nconst NUMBER_OF_FARMS_VISIBLE = 10\n\nconst JungleFarms: React.FC = () => {\n  useSetJungleFarms()\n  usePollJungleFarms()\n  const { chainId } = useActiveWeb3React()\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('all')\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const { account } = useWeb3React()\n  const { pathname } = useLocation()\n  const allJungleFarms = useJungleFarms(account)\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const { search } = window.location\n  const params = new URLSearchParams(search)\n  const urlSearchedFarm = parseInt(params.get('id'))\n  const isActive = !pathname.includes('history')\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const { jungleFarmTags } = useJungleFarmTags(chainId)\n  const { jungleFarmOrderings } = useJungleFarmOrderings(chainId)\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  useEffect(() => {\n    const showMoreJungleFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreJungleFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const currJungleFarms = allJungleFarms.map((farm) => {\n    return { ...farm, isFinished: farm.isFinished || currentBlock > farm.endBlock }\n  })\n\n  const farmsWithHarvestAvailable = currJungleFarms.filter((farm) =>\n    farm.userData ? farm.userData.pendingReward > new BigNumber(0) : null,\n  )\n  const harvestJungleIds = farmsWithHarvestAvailable.map((farm) => {\n    return farm.jungleId\n  })\n\n  const [finishedJungleFarms, openFarms] = partition(currJungleFarms, (farm) => farm.isFinished)\n\n  const stakedOnlyFarms = openFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedInactiveFarms = finishedJungleFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortJungleFarms = (farmsToSort: JungleFarm[]) => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farmsToSort, (farm: JungleFarm) => farm.apr, 'desc')\n      case 'liquidity':\n        return orderBy(\n          farmsToSort,\n          (farm: JungleFarm) => getBalanceNumber(farm.totalStaked) * farm.stakingToken.price,\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          farmsToSort,\n          (farm: JungleFarm) => {\n            if (!farm.userData || !farm.rewardToken?.price) {\n              return 0\n            }\n            return getBalanceNumber(farm.userData.pendingReward) * farm.rewardToken?.price\n          },\n          'desc',\n        )\n      case 'hot':\n        return jungleFarmTags\n          ? orderBy(\n              farmsToSort,\n              (farm: JungleFarm) =>\n                jungleFarmTags?.find((tag) => tag.pid === farm.jungleId && tag.text.toLowerCase() === 'hot'),\n              'asc',\n            )\n          : farmsToSort\n      case 'new':\n        return jungleFarmTags\n          ? orderBy(\n              farmsToSort,\n              (farm: JungleFarm) =>\n                jungleFarmTags?.find((tag) => tag.pid === farm.jungleId && tag.text.toLowerCase() === 'new'),\n              'asc',\n            )\n          : farmsToSort\n      default:\n        return jungleFarmOrderings\n          ? orderBy(\n              farmsToSort,\n              (farm: JungleFarm) => jungleFarmOrderings?.find((ordering) => ordering.pid === farm.jungleId)?.order,\n              'asc',\n            )\n          : farmsToSort\n    }\n  }\n\n  const renderJungleFarms = () => {\n    let chosenJungleFarms = isActive ? openFarms : finishedJungleFarms\n    if (urlSearchedFarm) {\n      const farmCheck =\n        openFarms?.find((farm) => {\n          return farm.jungleId === urlSearchedFarm\n        }) !== undefined\n      if (farmCheck) {\n        chosenJungleFarms = [\n          openFarms?.find((farm) => {\n            return farm.jungleId === urlSearchedFarm\n          }),\n          ...openFarms?.filter((farm) => {\n            return farm.jungleId !== urlSearchedFarm\n          }),\n        ]\n      }\n    }\n\n    if (stakedOnly) {\n      chosenJungleFarms = isActive ? stakedOnlyFarms : stakedInactiveFarms\n    }\n    if (searchQuery) {\n      const lowercaseQuery = searchQuery.toLowerCase()\n      chosenJungleFarms = chosenJungleFarms.filter((farm) => farm.tokenName.toLowerCase().includes(lowercaseQuery))\n    }\n\n    return sortJungleFarms(chosenJungleFarms).slice(0, numberOfFarmsVisible)\n  }\n\n  return (\n    <>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        mb=\"100px\"\n        style={{ position: 'relative', top: '30px', width: '100%' }}\n      >\n        <ListViewLayout>\n          <Banner\n            banner=\"jungle-farms\"\n            title={t('Jungle Farms')}\n            link=\"https://apeswap.gitbook.io/apeswap-finance/product-and-features/stake/farms\"\n            listViewBreak\n            maxWidth={1130}\n          />\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\n            <ListViewMenu\n              onHandleQueryChange={handleChangeQuery}\n              onSetSortOption={setSortOption}\n              onSetStake={setStakedOnly}\n              harvestAll={<HarvestAll jungleIds={harvestJungleIds} disabled={harvestJungleIds.length === 0} />}\n              stakedOnly={stakedOnly}\n              query={searchQuery}\n              activeOption={sortOption}\n              showMonkeyImage\n              isJungle\n            />\n          </Flex>\n          <DisplayJungleFarms\n            jungleFarms={renderJungleFarms()}\n            openId={urlSearchedFarm}\n            jungleFarmTags={jungleFarmTags}\n          />\n        </ListViewLayout>\n      </Flex>\n      <div ref={loadMoreRef} />\n    </>\n  )\n}\n\nexport default React.memo(JungleFarms)\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number, days?: boolean) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS && !days) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS && !days) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Text, Button, Input, InputProps, Flex } from '@apeswapfinance/uikit'\nimport { useTranslation } from '../../contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  displayDecimals?: number\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.white3};\n  border-radius: 16px;\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  border: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  font-weight: 800;\n  background-color: ${({ theme }) => theme.colors.white3};\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledButton = styled(Button)`\n  border-radius: 6px;\n  color: ${({ theme }) => theme.colors.primaryBright};\n  font-weight: 500;\n  font-size: 16px;\n  padding: 3px 10px;\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  inputTitle,\n  displayDecimals,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(displayDecimals || 4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\" fontWeight={800}>\n            {inputTitle}\n          </Text>\n          <Text fontSize=\"16px\" fontWeight={500}>\n            {t('Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <StyledButton size=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </StyledButton>\n          <Text fontSize=\"16px\" fontWeight={600}>\n            {symbol}\n          </Text>\n        </Flex>\n      </StyledTokenInput>\n    </div>\n  )\n}\n\nexport default ModalInput\n","import styled from 'styled-components'\nimport { Button, ArrowDropUpIcon, Flex, Text } from '@apeswapfinance/uikit'\n\nexport const FarmButton = styled(Button)`\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 700;\n  padding: 10px 20px;\n  min-width: 129px;\n  height: 44px;\n`\n\nexport const NextArrow = styled(ArrowDropUpIcon)`\n  transform: rotate(90deg);\n`\n\nexport const Container = styled(Flex)`\n  flex-direction: row;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  margin-top: 20px;\n`\n\nexport const TitleText = styled(Text)`\n  font-size: 12px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, useHistory } from 'react-router-dom'\nimport { Toggle } from '@apeswapfinance/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled.div`\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nconst MenuTabButton: React.FC = () => {\n  const { url, isExact } = useRouteMatch()\n  const history = useHistory()\n  const { t } = useTranslation()\n\n  const handleClick = () => {\n    if (isExact) {\n      history.push(`${url}/history`)\n    } else {\n      history.push(url)\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Toggle size=\"md\" labels={[t('ACTIVE'), t('INACTIVE')]} onClick={handleClick} checked={!isExact} />\n    </Wrapper>\n  )\n}\n\nexport default React.memo(MenuTabButton)\n","import styled from 'styled-components'\nimport { Text, Checkbox, Heading, Flex } from '@apeswapfinance/uikit'\n\nexport const ControlContainer = styled(Flex)`\n  position: relative;\n  flex-wrap: wrap;\n  border-radius: 10px;\n  align-items: space-around;\n  justify-content: space-between;\n  flex-direction: row;\n  padding: 15px;\n  z-index: 1;\n  background-color: ${({ theme }) => theme.colors.white2};\n  min-width: 300px;\n  max-width: 500px;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    min-height: 59px;\n    height: 100%;\n    padding: 20px 150px 20px 20px;\n    align-items: center;\n    max-width: 100%;\n  }\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding: 0px 130px 0px 30px;\n  }\n`\n\nexport const MobilePadding = styled(Flex)`\n  padding: 7.5px 0;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 0 0;\n  }\n`\n\nexport const ControlWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid red;\n`\n\nexport const ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  ${Text} {\n    margin-left: 4px;\n    ${({ theme }) => theme.mediaQueries.md} {\n      margin-left: 8px;\n    }\n  }\n`\n\nexport const LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  display: flex;\n  align-items: flex-end;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    justify-content: center;\n    align-items: center;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nexport const HeadingContainer = styled.div`\n  max-width: 1024px;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nexport const Header = styled.div`\n  padding-top: 36px;\n  padding-left: 10px;\n  padding-right: 10px;\n  background-image: ${({ theme }) => (theme.isDark ? 'url(/images/farm-night.svg)' : 'url(/images/farm-day.svg)')};\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 250px;\n  background-position: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding-left: 24px;\n    padding-right: 24px;\n    height: 300px;\n  }\n`\n\nexport const StyledText = styled(Text)`\n  font-weight: 700;\n  font-size: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 16px !important;\n  }\n`\nexport const StyledCheckbox = styled(Checkbox)<{ checked?: boolean }>`\n  height: 21px;\n  width: 21px;\n  margin-left: 20px;\n`\n\nexport const StyledImage = styled.img`\n  height: 187px;\n  width: 134px;\n  position: absolute;\n  right: 0px;\n  bottom: 51px;\n  display: none;\n\n  @media screen and (min-width: 340px) {\n    right: 20px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    bottom: 51px;\n    right: 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 0px;\n    right: 0px;\n    display: block;\n  }\n`\n\nexport const StyledHeading = styled(Heading)`\n  font-size: 30px;\n  max-width: 176px !important;\n  color: ${({ theme }) => theme.colors.text};\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    font-size: 30px;\n    max-width: 240px !important;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 44px;\n    max-width: 400px !important;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    font-size: 60px;\n    max-width: 600px !important;\n  }\n`\n\nexport const SectionOneWrapper = styled(Flex)`\n  justify-content: space-between;\n  align-items: flex-end;\n  z-index: 1;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 410px;\n    align-items: center;\n  }\n  ${({ theme }) => theme.mediaQueries.xl} {\n    width: 430px;\n    align-items: center;\n  }\n`\n\nexport const SectionTwoWrapper = styled(Flex)`\n  justify-content: space-between;\n  width: 100%;\n  align-items: center;\n  margin-top: 15px;\n  align-self: flex-start;\n  z-index: 0;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 245px;\n    margin-top: 0px;\n    align-self: center;\n  }\n  ${({ theme }) => theme.mediaQueries.xl} {\n    width: 275px;\n  }\n`\n\nexport const HarvestAllWrapper = styled(Flex)`\n  justify-content: center;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 250px;\n    margin-top: 20px;\n  }\n  ${({ theme }) => theme.mediaQueries.xl} {\n    width: 180px;\n    margin-top: 0px;\n  }\n`\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n"],"sourceRoot":""}