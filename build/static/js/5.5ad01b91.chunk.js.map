{"version":3,"sources":["state/pools/hooks.ts","state/jungleFarms/hooks.ts","hooks/useApprove.ts","hooks/useHarvest.ts","hooks/useStake.ts","hooks/useUnstake.ts"],"names":["usePollPools","chainId","useNetworkChainId","tokenPrices","useTokenPrices","dispatch","useAppDispatch","useEffect","ChainId","BSC","fetchPoolsPublicDataAsync","usePools","account","slowRefresh","useRefresh","useActiveWeb3React","pools","useSelector","state","data","poolsLoaded","length","BSC_TESTNET","fetchPoolsUserDataAsync","usePoolTags","Tags","stats","poolTags","useSetPools","useFetchTokenPrices","setInitialPoolDataAsync","usePoolOrderings","Ordering","poolOrderings","usePollJungleFarms","fetchJungleFarmsPublicDataAsync","useJungleFarms","farms","jungleFarms","farmsLoaded","fetchJungleFarmsUserDataAsync","useSetJungleFarms","setInitialJungleFarmDataAsync","useJungleFarmTags","jungleFarmTags","useJungleFarmOrderings","jungleFarmOrderings","useApprove","lpContract","masterChefContract","useMasterchef","onApprove","useCallback","a","approve","trx","track","event","chain","token","to","cat","useSousApprove","sousId","sousChefContract","useSousChef","tx","id","useJungleApprove","jungleId","jungleChefContract","useJungleChef","useIfoApprove","tokenAddress","spenderAddress","tokenContract","useERC20","ethers","constants","MaxUint256","then","t","wait","useAuctionApprove","useNonFungibleApes","useAuctionAddress","setApprovalForAll","useNfaStakingApprove","contractToApprove","useDispatch","updateNfaStakingUserAllowance","useDualFarmApprove","pid","miniChefContract","useMiniChefContract","updateDualFarmUserAllowances","console","warn","useHarvest","farmPid","useWeb3React","onHarvest","harvest","txHash","useJungleHarvest","jungleHarvest","trxHash","useAllHarvest","farmPids","onReward","MATIC","harvestPromises","reduce","accum","miniChefHarvest","Promise","all","useSousHarvest","soushHarvest","useSousHarvestAll","sousIds","library","onHarvestAll","map","config","find","pool","getContract","contractAddress","sousChef","useJungleHarvestAll","jungleIds","farm","useNfaStakingHarvest","nfaStakingChef","useNfaStakingChef","nfaStakeHarvest","updateUserNfaStakingPendingReward","updateNfaStakingUserBalance","useMiniChefHarvest","updateDualFarmUserEarnings","updateDualFarmRewarderEarnings","useSousStake","handleStake","amount","stake","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useJungleStake","jungleStake","useNfaStake","nfaStakeChefContract","ids","nfaStake","updateUserNfaStakingStakedBalance","useDualFarmStake","miniChefStake","updateDualFarmUserStakedBalances","updateDualFarmUserTokenBalances","info","useStake","SYRUPIDS","useSousUnstake","isOldSyrup","includes","handleUnstake","unstake","sousEmegencyWithdraw","sousUnstake","updateUserPendingReward","onUnstake","useJungleUnstake","jungleUnstake","useSousEmergencyWithdraw","onEmergencyWithdraw","useNfaUnstake","nfaUnstake","useMiniChefUnstake","miniChefUnstake","useUnstake"],"mappings":"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","file":"static/js/5.5ad01b91.chunk.js","sourcesContent":["import { ChainId } from '@apeswapfinance/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useNetworkChainId } from 'state/hooks'\nimport { useFetchTokenPrices, useTokenPrices } from 'state/tokenPrices/hooks'\nimport { Pool, State, StatsState } from 'state/types'\nimport { fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, setInitialPoolDataAsync } from '.'\n\nexport const usePollPools = () => {\n  const chainId = useNetworkChainId()\n  const { tokenPrices } = useTokenPrices()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (chainId === ChainId.BSC) {\n      dispatch(fetchPoolsPublicDataAsync(chainId, tokenPrices))\n    }\n  }, [dispatch, tokenPrices, chainId])\n}\n\nexport const usePools = (account): Pool[] => {\n  const { slowRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  const { chainId } = useActiveWeb3React()\n  const pools = useSelector((state: State) => state.pools.data)\n  const poolsLoaded = pools.length > 0\n  useEffect(() => {\n    if (account && (chainId === ChainId.BSC || chainId === ChainId.BSC_TESTNET)) {\n      dispatch(fetchPoolsUserDataAsync(chainId, account))\n    }\n  }, [account, dispatch, slowRefresh, chainId, poolsLoaded])\n\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\nexport const useGnanaPools = (account): Pool[] => {\n  const pools = usePools(account).filter((pool) => pool.stakingToken.symbol === 'GNANA')\n  return pools\n}\n\nexport const useAllPools = (): Pool[] => {\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolTags = (chainId: number) => {\n  const { Tags }: StatsState = useSelector((state: State) => state.stats)\n  const poolTags = Tags?.[`${chainId}`]?.pools\n\n  return { poolTags }\n}\n\nexport const useSetPools = () => {\n  useFetchTokenPrices()\n  const dispatch = useAppDispatch()\n  const pools = useAllPools()\n  if (pools.length === 0) {\n    dispatch(setInitialPoolDataAsync())\n  }\n}\n\n// ORDERING\nexport const usePoolOrderings = (chainId: number) => {\n  const { Ordering }: StatsState = useSelector((state: State) => state.stats)\n  const poolOrderings = Ordering?.[`${chainId}`]?.pools\n\n  return { poolOrderings }\n}\n","import { ChainId } from '@apeswapfinance/sdk'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useNetworkChainId } from 'state/hooks'\nimport { useFetchTokenPrices, useTokenPrices } from 'state/tokenPrices/hooks'\nimport { JungleFarm, State, StatsState } from 'state/types'\nimport { fetchJungleFarmsPublicDataAsync, fetchJungleFarmsUserDataAsync, setInitialJungleFarmDataAsync } from '.'\n\nexport const usePollJungleFarms = () => {\n  const chainId = useNetworkChainId()\n  const { tokenPrices } = useTokenPrices()\n\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (chainId === ChainId.BSC) {\n      dispatch(fetchJungleFarmsPublicDataAsync(chainId, tokenPrices))\n    }\n  }, [dispatch, tokenPrices, chainId])\n}\n\nexport const useJungleFarms = (account): JungleFarm[] => {\n  const { slowRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  const { chainId } = useActiveWeb3React()\n  const farms = useSelector((state: State) => state.jungleFarms.data)\n  const farmsLoaded = farms.length > 0\n\n  useEffect(() => {\n    if (account && (chainId === ChainId.BSC || chainId === ChainId.BSC_TESTNET)) {\n      dispatch(fetchJungleFarmsUserDataAsync(chainId, account))\n    }\n  }, [account, dispatch, slowRefresh, farmsLoaded, chainId])\n\n  return farms\n}\n\nexport const useSetJungleFarms = () => {\n  useFetchTokenPrices()\n  const dispatch = useAppDispatch()\n  const jungleFarms = useJungleFarms(null)\n  if (jungleFarms.length === 0) {\n    dispatch(setInitialJungleFarmDataAsync())\n  }\n}\n\nexport const useJungleFarmTags = (chainId: number) => {\n  const { Tags }: StatsState = useSelector((state: State) => state.stats)\n  const jungleFarmTags = Tags?.[`${chainId}`]?.jungleFarms\n\n  return { jungleFarmTags }\n}\n\nexport const useJungleFarmOrderings = (chainId: number) => {\n  const { Ordering }: StatsState = useSelector((state: State) => state.stats)\n  const jungleFarmOrderings = Ordering?.[`${chainId}`]?.jungleFarms\n\n  return { jungleFarmOrderings }\n}\n","import { useCallback } from 'react'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateNfaStakingUserAllowance } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport track from 'utils/track'\nimport { updateDualFarmUserAllowances } from 'state/dualFarms'\nimport useActiveWeb3React from './useActiveWeb3React'\nimport { useAuctionAddress } from './useAddress'\nimport {\n  useMasterchef,\n  useSousChef,\n  useNonFungibleApes,\n  useMiniChefContract,\n  useERC20,\n  useJungleChef,\n} from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract) => {\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    const trx = await approve(lpContract, masterChefContract)\n    track({\n      event: 'farm',\n      chain: 56,\n      data: {\n        token: trx?.to,\n        cat: 'enable',\n      },\n    })\n    return trx\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract, sousId) => {\n  const { chainId } = useActiveWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    const tx = await approve(lpContract, sousChefContract)\n    track({\n      event: 'pool',\n      chain: chainId,\n      data: {\n        token: tx.to,\n        id: sousId,\n        cat: 'enable',\n      },\n    })\n    return tx\n  }, [lpContract, sousChefContract, sousId, chainId])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useJungleApprove = (lpContract, jungleId) => {\n  const { chainId } = useActiveWeb3React()\n  const jungleChefContract = useJungleChef(jungleId)\n\n  const handleApprove = useCallback(async () => {\n    const tx = await approve(lpContract, jungleChefContract)\n    track({\n      event: 'jungle_farm',\n      chain: chainId,\n      data: {\n        token: tx.to,\n        id: jungleId,\n        cat: 'enable',\n      },\n    })\n    return tx\n  }, [lpContract, jungleChefContract, jungleId, chainId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenAddress: string, spenderAddress: string) => {\n  const tokenContract = useERC20(tokenAddress)\n  const onApprove = useCallback(async () => {\n    try {\n      return await tokenContract.approve(spenderAddress, ethers.constants.MaxUint256).then((t) => t.wait())\n    } catch {\n      return false\n    }\n  }, [spenderAddress, tokenContract])\n\n  return onApprove\n}\n\n// Approve an Auction\nexport const useAuctionApprove = () => {\n  const tokenContract = useNonFungibleApes()\n  const spenderAddress = useAuctionAddress()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.setApprovalForAll(spenderAddress, true)\n      return tx\n    } catch {\n      return false\n    }\n  }, [spenderAddress, tokenContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an NFA\nexport const useNfaStakingApprove = (contractToApprove: string, sousId) => {\n  const dispatch = useDispatch()\n  const tokenContract = useNonFungibleApes()\n  const { account, chainId } = useActiveWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.setApprovalForAll(contractToApprove, true)\n      dispatch(updateNfaStakingUserAllowance(chainId, sousId, account))\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, dispatch, contractToApprove, sousId, tokenContract, chainId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Farm\nexport const useDualFarmApprove = (lpContract, pid: number) => {\n  const dispatch = useDispatch()\n  const { account, chainId } = useActiveWeb3React()\n  const miniChefContract = useMiniChefContract()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, miniChefContract)\n      track({\n        event: 'dualFarm',\n        chain: chainId,\n        data: {\n          token: tx.to,\n          cat: 'enable',\n        },\n      })\n      dispatch(updateDualFarmUserAllowances(chainId, pid, account))\n      return tx\n    } catch (e) {\n      console.warn(e)\n      return false\n    }\n  }, [account, dispatch, lpContract, miniChefContract, pid, chainId])\n\n  return { onApprove: handleApprove }\n}\n","import { useCallback } from 'react'\nimport sousChef from 'config/abi/sousChef.json'\nimport { useWeb3React } from '@web3-react/core'\nimport { ChainId } from '@apeswapfinance/sdk'\nimport { useDispatch } from 'react-redux'\nimport { soushHarvest, harvest, nfaStakeHarvest, miniChefHarvest, jungleHarvest } from 'utils/callHelpers'\nimport { usePools } from 'state/pools/hooks'\nimport track from 'utils/track'\nimport { useNetworkChainId } from 'state/hooks'\nimport { getContract } from 'utils'\nimport { useJungleFarms } from 'state/jungleFarms/hooks'\nimport { SousChef, JungleChef } from 'config/abi/types'\nimport { updateDualFarmRewarderEarnings, updateDualFarmUserEarnings } from 'state/dualFarms'\nimport { updateUserNfaStakingPendingReward, updateNfaStakingUserBalance } from 'state/nfaStakingPools'\nimport { useMasterchef, useMiniChefContract, useSousChef, useNfaStakingChef, useJungleChef } from './useContract'\nimport useActiveWeb3React from './useActiveWeb3React'\n\nexport const useHarvest = (farmPid: number) => {\n  const { chainId } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid)\n    track({\n      event: 'farm',\n      chain: chainId,\n      data: {\n        cat: 'harvest',\n        pid: farmPid,\n      },\n    })\n    return txHash\n  }, [farmPid, masterChefContract, chainId])\n\n  return { onHarvest: handleHarvest }\n}\n\nexport const useJungleHarvest = (jungleId) => {\n  const { chainId } = useActiveWeb3React()\n  const jungleChefContract = useJungleChef(jungleId)\n\n  const handleHarvest = useCallback(async () => {\n    const trxHash = await jungleHarvest(jungleChefContract)\n\n    track({\n      event: 'jungle_farm',\n      chain: chainId,\n      data: {\n        cat: 'harvest',\n        pid: jungleId,\n      },\n    })\n    return trxHash\n  }, [jungleChefContract, jungleId, chainId])\n\n  return { onHarvest: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[], chainId: number) => {\n  const { account } = useActiveWeb3React()\n  const masterChefContract = useMasterchef()\n  const miniChefContract = useMiniChefContract()\n\n  const handleHarvest = useCallback(async () => {\n    if (chainId === ChainId.MATIC) {\n      const harvestPromises = farmPids.reduce((accum, pid) => {\n        return [...accum, miniChefHarvest(miniChefContract, pid, account)]\n      }, [])\n      return Promise.all(harvestPromises)\n    }\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid)]\n    }, [])\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract, miniChefContract, chainId])\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId) => {\n  const { chainId } = useActiveWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    let trxHash\n    if (sousId === 0) {\n      trxHash = await harvest(masterChefContract, 0)\n    } else {\n      trxHash = await soushHarvest(sousChefContract)\n    }\n    track({\n      event: 'pool',\n      chain: chainId,\n      data: {\n        cat: 'harvest',\n        pid: sousId,\n      },\n    })\n    return trxHash\n  }, [masterChefContract, sousChefContract, sousId, chainId])\n\n  return { onHarvest: handleHarvest }\n}\n\nexport const useSousHarvestAll = (sousIds: number[]) => {\n  const { account, library, chainId } = useActiveWeb3React()\n  const masterChefContract = useMasterchef()\n  const pools = usePools(null)\n\n  const handleHarvestAll = useCallback(async () => {\n    const harvestPromises = sousIds.map((sousId) => {\n      const config = pools.find((pool) => pool.sousId === sousId)\n      const sousChefContract = getContract(config.contractAddress[chainId], sousChef, library, account) as SousChef\n      return sousId === 0 ? harvest(masterChefContract, 0) : soushHarvest(sousChefContract)\n    })\n    return Promise.all(harvestPromises)\n  }, [account, sousIds, library, masterChefContract, chainId, pools])\n  return { onHarvestAll: handleHarvestAll }\n}\n\nexport const useJungleHarvestAll = (jungleIds: number[]) => {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const jungleFarms = useJungleFarms(null)\n\n  const handleHarvestAll = useCallback(async () => {\n    const harvestPromises = jungleIds.map((jungleId) => {\n      const config = jungleFarms.find((farm) => farm.jungleId === jungleId)\n      const jungleChefContract = getContract(config.contractAddress[chainId], sousChef, library, account) as JungleChef\n      return jungleHarvest(jungleChefContract)\n    })\n    return Promise.all(harvestPromises)\n  }, [account, jungleIds, library, chainId, jungleFarms])\n  return { onHarvestAll: handleHarvestAll }\n}\n\nexport const useNfaStakingHarvest = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWeb3React()\n  const chainId = useNetworkChainId()\n  const nfaStakingChef = useNfaStakingChef(sousId)\n  const handleHarvest = useCallback(async () => {\n    const trxHash = await nfaStakeHarvest(nfaStakingChef)\n    dispatch(updateUserNfaStakingPendingReward(chainId, sousId, account))\n    dispatch(updateNfaStakingUserBalance(chainId, sousId, account))\n    track({\n      event: 'nfa',\n      chain: chainId,\n      data: {\n        cat: 'harvest',\n        pid: sousId,\n      },\n    })\n    return trxHash\n  }, [account, dispatch, nfaStakingChef, sousId, chainId])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useMiniChefHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account, chainId } = useWeb3React()\n  const miniChefContract = useMiniChefContract()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await miniChefHarvest(miniChefContract, farmPid, account)\n    track({\n      event: 'dualFarm',\n      chain: chainId,\n      data: {\n        cat: 'harvest',\n        pid: farmPid,\n      },\n    })\n    dispatch(updateDualFarmUserEarnings(chainId, farmPid, account))\n    dispatch(updateDualFarmRewarderEarnings(chainId, farmPid, account))\n    return txHash\n  }, [account, dispatch, farmPid, miniChefContract, chainId])\n\n  return { onReward: handleHarvest }\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useDispatch } from 'react-redux'\nimport {\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateNfaStakingUserBalance,\n  updateUserNfaStakingStakedBalance,\n} from 'state/actions'\nimport { stake, sousStake, nfaStake, miniChefStake, jungleStake } from 'utils/callHelpers'\nimport track from 'utils/track'\nimport {\n  updateDualFarmUserEarnings,\n  updateDualFarmUserStakedBalances,\n  updateDualFarmUserTokenBalances,\n} from 'state/dualFarms'\nimport { useNetworkChainId } from 'state/hooks'\nimport { useJungleChef, useMasterchef, useMiniChefContract, useNfaStakingChef, useSousChef } from './useContract'\nimport useActiveWeb3React from './useActiveWeb3React'\n\nconst useStake = (pid: number) => {\n  const { chainId } = useActiveWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const trxHash = await stake(masterChefContract, pid, amount)\n      track({\n        event: 'farm',\n        chain: chainId,\n        data: {\n          cat: 'stake',\n          amount,\n          pid,\n        },\n      })\n      return trxHash\n    },\n    [masterChefContract, pid, chainId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account, chainId } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      let trxHash\n      if (sousId === 0) {\n        trxHash = await stake(masterChefContract, 0, amount)\n      } else {\n        trxHash = await sousStake(sousChefContract, amount)\n      }\n\n      track({\n        event: 'pool',\n        chain: 56,\n        data: {\n          cat: 'stake',\n          amount,\n          pid: sousId,\n        },\n      })\n\n      dispatch(updateUserStakedBalance(chainId, sousId, account))\n      dispatch(updateUserBalance(chainId, sousId, account))\n      return trxHash\n    },\n    [account, dispatch, masterChefContract, sousChefContract, sousId, chainId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useJungleStake = (jungleId) => {\n  const jungleChefContract = useJungleChef(jungleId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const trxHash = await jungleStake(jungleChefContract, amount)\n\n      track({\n        event: 'jungle_farm',\n        chain: 56,\n        data: {\n          cat: 'stake',\n          amount,\n          pid: jungleId,\n        },\n      })\n\n      return trxHash\n    },\n    [jungleChefContract, jungleId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useNfaStake = (sousId) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account } = useWeb3React()\n  const chainId = useNetworkChainId()\n  const nfaStakeChefContract = useNfaStakingChef(sousId)\n\n  const handleStake = useCallback(\n    async (ids: number[]) => {\n      await nfaStake(nfaStakeChefContract, ids)\n      dispatch(updateUserNfaStakingStakedBalance(chainId, sousId, account))\n      dispatch(updateNfaStakingUserBalance(chainId, sousId, account))\n      track({\n        event: 'nfa',\n        chain: chainId,\n        data: {\n          cat: 'stake',\n          ids,\n          pid: sousId,\n        },\n      })\n    },\n    [account, dispatch, nfaStakeChefContract, sousId, chainId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useDualFarmStake = (pid: number) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account, chainId } = useWeb3React()\n  const miniChefContract = useMiniChefContract()\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await miniChefStake(miniChefContract, pid, amount, account)\n      dispatch(updateDualFarmUserStakedBalances(chainId, pid, account))\n      dispatch(updateDualFarmUserEarnings(chainId, pid, account))\n      dispatch(updateDualFarmUserTokenBalances(chainId, pid, account))\n      track({\n        event: 'dualFarm',\n        chain: chainId,\n        data: {\n          cat: 'stake',\n          amount,\n          pid,\n        },\n      })\n      console.info(txHash)\n      return txHash\n    },\n    [account, dispatch, miniChefContract, pid, chainId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useDispatch } from 'react-redux'\nimport {\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserNfaStakingStakedBalance,\n  updateNfaStakingUserBalance,\n  updateUserNfaStakingPendingReward,\n} from 'state/actions'\nimport track from 'utils/track'\nimport {\n  unstake,\n  sousUnstake,\n  sousEmegencyWithdraw,\n  nfaUnstake,\n  miniChefUnstake,\n  jungleUnstake,\n} from 'utils/callHelpers'\nimport {\n  updateDualFarmUserEarnings,\n  updateDualFarmUserStakedBalances,\n  updateDualFarmUserTokenBalances,\n} from 'state/dualFarms'\nimport { useNetworkChainId } from 'state/hooks'\nimport { useJungleChef, useMasterchef, useMiniChefContract, useNfaStakingChef, useSousChef } from './useContract'\nimport useActiveWeb3React from './useActiveWeb3React'\n\nconst useUnstake = (pid: number) => {\n  const { chainId } = useActiveWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const trxHash = await unstake(masterChefContract, pid, amount)\n      track({\n        event: 'farm',\n        chain: chainId,\n        data: {\n          cat: 'unstake',\n          amount,\n          pid,\n        },\n      })\n      return trxHash\n    },\n    [masterChefContract, pid, chainId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\n// TODO remove legacy code we don't need to support\nconst SYRUPIDS = []\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account, chainId } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      let trxHash\n      if (sousId === 0) {\n        trxHash = await unstake(masterChefContract, 0, amount)\n      } else if (isOldSyrup) {\n        trxHash = await sousEmegencyWithdraw(sousChefContract)\n      } else {\n        trxHash = await sousUnstake(sousChefContract, amount)\n      }\n      dispatch(updateUserStakedBalance(chainId, sousId, account))\n      dispatch(updateUserBalance(chainId, sousId, account))\n      dispatch(updateUserPendingReward(chainId, sousId, account))\n      track({\n        event: 'pool',\n        chain: chainId,\n        data: {\n          cat: 'unstake',\n          amount,\n          sousId,\n        },\n      })\n      return trxHash\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId, chainId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useJungleUnstake = (jungleId) => {\n  const { chainId } = useActiveWeb3React()\n  const jungleChefContract = useJungleChef(jungleId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const trxHash = await jungleUnstake(jungleChefContract, amount)\n\n      track({\n        event: 'jungle_farm',\n        chain: chainId,\n        data: {\n          cat: 'unstake',\n          amount,\n          jungleId,\n        },\n      })\n      return trxHash\n    },\n    [jungleChefContract, jungleId, chainId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousEmergencyWithdraw = (sousId) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account, chainId } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const handleEmergencyWithdraw = useCallback(async () => {\n    const txHash = await sousEmegencyWithdraw(sousChefContract)\n    dispatch(updateUserStakedBalance(chainId, sousId, account))\n    dispatch(updateUserBalance(chainId, sousId, account))\n    dispatch(updateUserPendingReward(chainId, sousId, account))\n    console.info(txHash)\n  }, [account, dispatch, sousChefContract, sousId, chainId])\n  return { onEmergencyWithdraw: handleEmergencyWithdraw }\n}\n\nexport const useNfaUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account } = useWeb3React()\n  const chainId = useNetworkChainId()\n  const nfaStakeChefContract = useNfaStakingChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (ids: number[]) => {\n      await nfaUnstake(nfaStakeChefContract, ids)\n      dispatch(updateUserNfaStakingStakedBalance(chainId, sousId, account))\n      dispatch(updateNfaStakingUserBalance(chainId, sousId, account))\n      dispatch(updateUserNfaStakingPendingReward(chainId, sousId, account))\n      track({\n        event: 'nfa',\n        chain: chainId,\n        data: {\n          cat: 'unstake',\n          ids,\n        },\n      })\n    },\n    [account, dispatch, nfaStakeChefContract, sousId, chainId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useMiniChefUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  // TODO switch to useActiveWeb3React. useWeb3React is legacy hook and useActiveWeb3React should be used going forward\n  const { account, chainId } = useWeb3React()\n  const miniChefContract = useMiniChefContract()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await miniChefUnstake(miniChefContract, pid, amount, account)\n      dispatch(updateDualFarmUserEarnings(chainId, pid, account))\n      dispatch(updateDualFarmUserStakedBalances(chainId, pid, account))\n      dispatch(updateDualFarmUserTokenBalances(chainId, pid, account))\n      return txHash\n    },\n    [account, dispatch, miniChefContract, pid, chainId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n"],"sourceRoot":""}