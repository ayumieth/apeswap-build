{"version":3,"sources":["views/Farms/components/CardActions/styles.ts","views/Farms/components/CardActions/ApprovalAction.tsx","views/Farms/components/Modals/DepositModal.tsx","views/Farms/components/Modals/WithdrawModal.tsx","views/Farms/components/CardActions/StakeActions.tsx","views/Farms/components/CardActions/index.tsx","views/Farms/components/CardActions/HarvestAction.tsx","views/Farms/InfoContent.tsx","views/Farms/components/DisplayFarms.tsx","views/Farms/components/CardActions/HarvestAllAction.tsx","views/Farms/Farms.tsx"],"names":["StyledButton","styled","Button","SmallButton","ActionContainer","Flex","theme","mediaQueries","md","CenterContainer","StyledTag","Tag","ApprovalAction","stakingTokenContractAddress","pid","isLoading","useActiveWeb3React","chainId","account","dispatch","useAppDispatch","stakingTokenContract","useERC20","useState","pendingTrx","setPendingTrx","onApprove","useApprove","toastSuccess","useToast","t","useTranslation","width","height","className","disabled","onClick","a","then","resp","trxHash","transactionHash","text","url","getEtherscanLink","catch","e","console","error","updateFarmUserAllowances","endIcon","spin","color","React","memo","DepositModal","max","onConfirm","onDismiss","tokenName","addLiquidityUrl","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","BigNumber","handleChange","useCallback","currentTarget","value","handleSelectMax","title","ModalInput","onSelectMax","onChange","symbol","inputTitle","fullWidth","parseFloat","style","borderRadius","WithdrawModal","StakeAction","stakingTokenBalance","stakedBalance","lpValueUsd","rawStakedBalance","getBalanceNumber","userStakedBalanceUsd","toFixed","pendingDepositTrx","setPendingDepositTrx","pendingWithdrawTrx","setPendingWithdrawTrx","useMatchBreakpoints","isXl","isLg","isXxl","isMobile","firstStake","gt","onStake","useStake","onUnstake","useUnstake","useModal","fetchFarmUserDataAsync","onPresentDeposit","href","onPresentWithdraw","ListViewContent","value2","value2Secondary","lineHeight","ml","mr","fontWeight","renderStakingButtons","CardActions","allowance","stakeLpAddress","UnlockButton","table","actionToRender","HarvestAction","userEarningsUsd","onHarvest","useHarvest","updateFarmUserEarnings","InfoContent","farm","bscScanUrl","lpAddresses","projectLink","sx","flexDirection","alignItems","justifyContent","fontSize","bold","Math","round","multiplier","lpSymbol","marginTop","DisplayFarms","farms","openPid","farmTags","useIsMobile","closeModal","handleClose","onPresentAddLiquidityWidgetModal","farmsListView","map","split","token1","token2","userAllowance","userData","userEarnings","earnings","bananaPrice","userTokenBalance","tokenBalance","userTokenBalanceUsd","fTag","find","tag","tagColor","marginRight","mt","variant","tokens","token3","stakeLp","open","id","infoContent","infoContentPosition","toolTipIconWidth","toolTipStyle","cardContent","apy","toolTip","toolTipPlacement","toolTipTransform","apr","lpApr","value2Icon","icon","valueIcon","aprCalculator","CalcButton","label","rewardTokenName","rewardTokenPrice","lpAddress","isLp","tokenAddress","tokenAddresses","quoteTokenAddress","quoteTokenSymbol","quoteTokenAdresses","Number","totalLpStakedUsd","toLocaleString","undefined","expandedContent","token","quoteToken","selectCurrency","field","Field","INPUT","currencyId","OUTPUT","toString","ListView","listViews","HarvestAllAction","pids","onReward","useAllHarvest","size","length","Farms","useSetFarms","usePollFarms","useFetchFarmLpAprs","pathname","useLocation","observerIsSet","setObserverIsSet","NUMBER_OF_FARMS_VISIBLE","numberOfFarmsVisible","setNumberOfFarmsVisible","farmsLP","useFarms","search","window","location","params","URLSearchParams","urlSearchedFarm","parseInt","get","query","setQuery","sortOption","setSortOption","loadMoreRef","useRef","useFarmTags","farmOrderings","useFarmOrderings","useEffect","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","current","stakedOnly","setStakedOnly","isActive","includes","activeFarms","filter","inactiveFarms","stakedOnlyFarms","isGreaterThan","stakedOnlyInactiveFarms","hasHarvestPids","filteredFarm","mb","position","top","ListViewLayout","Banner","banner","link","listViewBreak","maxWidth","ListViewMenu","onHandleQueryChange","event","target","onSetSortOption","onSetStake","harvestAll","activeOption","showMonkeyImage","toUpperCase","orderBy","ordering","order","slice","STABLES","tokenSymbol","BLUE_CHIPS","toLowerCase","renderFarms","ref"],"mappings":"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","file":"static/js/48.11b213c4.chunk.js","sourcesContent":["import { Button, Flex } from '@apeswapfinance/uikit'\nimport { Tag } from '@ape.swap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledButton = styled(Button)`\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 700;\n  padding: 10px 20px;\n  min-width: 227px;\n  height: 44px;\n`\n\nexport const SmallButton = styled(Button)`\n  max-width: 44px;\n  height: 44px;\n`\n\nexport const ActionContainer = styled(Flex)`\n  width: 100%;\n  justify-content: space-between;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: auto;\n  }\n`\n\nexport const CenterContainer = styled(Flex)`\n  width: 100%;\n  justify-content: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: auto;\n    justify-content: auto;\n  }\n`\n\nexport const StyledTag = styled(Tag)`\n  font-size: 10px;\n  padding: 0px 6px !important;\n  font-weight: 700;\n  border: none;\n  border-radius: 10px;\n  height: auto;\n  width: max-content;\n`\n","import React, { useState } from 'react'\nimport { Skeleton, AutoRenewIcon } from '@apeswapfinance/uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { updateFarmUserAllowances } from 'state/farms'\nimport { useAppDispatch } from 'state'\nimport { useERC20 } from 'hooks/useContract'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { useToast } from 'state/hooks'\nimport { StyledButton } from './styles'\n\ninterface ApprovalActionProps {\n  stakingTokenContractAddress: string\n  pid: number\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ stakingTokenContractAddress, pid, isLoading = false }) => {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const stakingTokenContract = useERC20(stakingTokenContractAddress)\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onApprove } = useApprove(stakingTokenContract)\n  const { toastSuccess } = useToast()\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <StyledButton\n          className=\"noClick\"\n          disabled={pendingTrx}\n          onClick={async () => {\n            setPendingTrx(true)\n            await onApprove()\n              .then((resp) => {\n                const trxHash = resp.transactionHash\n                toastSuccess(t('Approve Successful'), {\n                  text: t('View Transaction'),\n                  url: getEtherscanLink(trxHash, 'transaction', chainId),\n                })\n              })\n              .catch((e) => {\n                console.error(e)\n                setPendingTrx(false)\n              })\n            dispatch(updateFarmUserAllowances(chainId, pid, account))\n            setPendingTrx(false)\n          }}\n          endIcon={pendingTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n        >\n          {t('ENABLE')}\n        </StyledButton>\n      )}\n    </>\n  )\n}\n\nexport default React.memo(ApprovalAction)\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon, ModalFooter } from '@apeswapfinance/uikit'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(new BigNumber(max))\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalFooter onDismiss={onDismiss} t={t}>\n        <Button\n          fullWidth\n          disabled={pendingTx || fullBalance === '0' || val === '0' || parseFloat(fullBalance) < parseFloat(val)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              console.error('Transaction Failed')\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          endIcon={pendingTx && <AutoRenewIcon spin color=\"currentColor\" />}\n          style={{\n            borderRadius: '10px',\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default React.memo(DepositModal)\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon, ModalFooter } from '@apeswapfinance/uikit'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(new BigNumber(max))\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalFooter onDismiss={onDismiss} t={t}>\n        <Button\n          disabled={pendingTx || parseFloat(fullBalance) < parseFloat(val)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              console.error('Transaction Failed')\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          fullWidth\n          endIcon={pendingTx && <AutoRenewIcon spin color=\"currentColor\" />}\n          style={{\n            borderRadius: '10px',\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default React.memo(WithdrawModal)\n","import React, { useState } from 'react'\nimport {\n  Flex,\n  AddIcon,\n  MinusIcon,\n  useModal,\n  AutoRenewIcon,\n  LinkExternal,\n  Text,\n  useMatchBreakpoints,\n} from '@apeswapfinance/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { useToast } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport ListViewContent from 'components/ListViewContent'\nimport DepositModal from '../Modals/DepositModal'\nimport WithdrawModal from '../Modals/WithdrawModal'\nimport { ActionContainer, CenterContainer, SmallButton, StyledButton } from './styles'\n\ninterface StakeActionsProps {\n  stakingTokenBalance: string\n  stakedBalance: string\n  lpValueUsd: number\n  pid: number\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({ stakingTokenBalance, stakedBalance, lpValueUsd, pid }) => {\n  const rawStakedBalance = getBalanceNumber(new BigNumber(stakedBalance))\n  const dispatch = useAppDispatch()\n  const { chainId, account } = useActiveWeb3React()\n  const userStakedBalanceUsd = `$${(\n    getBalanceNumber(new BigNumber(stakedBalance) || new BigNumber(0)) * lpValueUsd\n  ).toFixed(2)}`\n  const [pendingDepositTrx, setPendingDepositTrx] = useState(false)\n  const [pendingWithdrawTrx, setPendingWithdrawTrx] = useState(false)\n  const { toastSuccess } = useToast()\n  const { isXl, isLg, isXxl } = useMatchBreakpoints()\n  const isMobile = !isLg && !isXl && !isXxl\n  const firstStake = !new BigNumber(stakedBalance)?.gt(0)\n  const { t } = useTranslation()\n\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingTokenBalance}\n      onConfirm={async (val) => {\n        setPendingDepositTrx(true)\n        await onStake(val)\n          .then((resp) => {\n            const trxHash = resp.transactionHash\n            toastSuccess(t('Deposit Successful'), {\n              text: t('View Transaction'),\n              url: getEtherscanLink(trxHash, 'transaction', chainId),\n            })\n          })\n          .catch((e) => {\n            console.error(e)\n            setPendingDepositTrx(false)\n          })\n        dispatch(fetchFarmUserDataAsync(chainId, account))\n        setPendingDepositTrx(false)\n      }}\n    />,\n  )\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={async (val) => {\n        setPendingWithdrawTrx(true)\n        await onUnstake(val)\n          .then((resp) => {\n            const trxHash = resp.transactionHash\n            toastSuccess(\n              t('Withdraw Successful'),\n              <LinkExternal href={getEtherscanLink(trxHash, 'transaction', chainId)}>\n                <Text> {t('View Transaction')} </Text>\n              </LinkExternal>,\n            )\n          })\n          .catch((e) => {\n            console.error(e)\n            setPendingWithdrawTrx(false)\n          })\n        dispatch(fetchFarmUserDataAsync(chainId, account))\n        setPendingWithdrawTrx(false)\n      }}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    if (firstStake) {\n      return (\n        <CenterContainer>\n          <StyledButton\n            onClick={onPresentDeposit}\n            endIcon={pendingDepositTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n            disabled={pendingDepositTrx}\n          >\n            {t('DEPOSIT')}\n          </StyledButton>\n        </CenterContainer>\n      )\n    }\n    return (\n      <ActionContainer>\n        {isMobile && (\n          <ListViewContent\n            title={t('Staked LP')}\n            value={`${rawStakedBalance.toFixed(6)} LP`}\n            value2={userStakedBalanceUsd}\n            value2Secondary\n            width={100}\n            height={50}\n            lineHeight={15}\n            ml={10}\n          />\n        )}\n        <Flex>\n          <SmallButton\n            onClick={onPresentWithdraw}\n            endIcon={pendingWithdrawTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n            disabled={pendingWithdrawTrx}\n            mr=\"6px\"\n          >\n            <MinusIcon color=\"white\" width=\"16px\" height=\"20px\" fontWeight={700} />\n          </SmallButton>\n          <SmallButton\n            onClick={onPresentDeposit}\n            endIcon={pendingDepositTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n            disabled={pendingDepositTrx || !new BigNumber(stakingTokenBalance)?.gt(0)}\n          >\n            <AddIcon color=\"white\" width=\"20px\" height=\"20px\" fontWeight={700} />\n          </SmallButton>\n        </Flex>\n        {!isMobile && (\n          <ListViewContent\n            title={t('Staked LP')}\n            value={`${rawStakedBalance.toFixed(6)} LP`}\n            value2={userStakedBalanceUsd}\n            value2Secondary\n            width={100}\n            height={50}\n            lineHeight={15}\n            ml={10}\n          />\n        )}\n      </ActionContainer>\n    )\n  }\n\n  return renderStakingButtons()\n}\n\nexport default React.memo(StakeAction)\n","import React from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport BigNumber from 'bignumber.js'\nimport { CenterContainer } from './styles'\nimport ApprovalAction from './ApprovalAction'\nimport StakeAction from './StakeActions'\nimport UnlockButton from '../../../../components/UnlockButton'\n\n// Changed props to type string because BigNumbers cause re-renders\n\ninterface CardActionProps {\n  allowance: string\n  stakingTokenBalance: string\n  stakedBalance: string\n  lpValueUsd: number\n  stakeLpAddress: string\n  pid: number\n}\n\nconst CardActions: React.FC<CardActionProps> = ({\n  allowance,\n  stakingTokenBalance,\n  stakedBalance,\n  lpValueUsd,\n  stakeLpAddress,\n  pid,\n}) => {\n  const { account } = useActiveWeb3React()\n  const actionToRender = () => {\n    if (!account) {\n      return (\n        <CenterContainer>\n          <UnlockButton table />\n        </CenterContainer>\n      )\n    }\n    if (!new BigNumber(allowance)?.gt(0)) {\n      return (\n        <CenterContainer>\n          <ApprovalAction stakingTokenContractAddress={stakeLpAddress} pid={pid} />\n        </CenterContainer>\n      )\n    }\n    return (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        stakingTokenBalance={stakingTokenBalance}\n        lpValueUsd={lpValueUsd}\n        pid={pid}\n      />\n    )\n  }\n  return actionToRender()\n}\n\nexport default React.memo(CardActions)\n","import React, { useState } from 'react'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { AutoRenewIcon, useMatchBreakpoints } from '@apeswapfinance/uikit'\nimport { useToast } from 'state/hooks'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { updateFarmUserEarnings } from 'state/farms'\nimport ListViewContent from 'components/ListViewContent'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmButton } from '../styles'\nimport { ActionContainer } from './styles'\n\ninterface HarvestActionsProps {\n  pid: number\n  userEarningsUsd: string\n  disabled: boolean\n}\n\nconst HarvestAction: React.FC<HarvestActionsProps> = ({ pid, disabled, userEarningsUsd }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onHarvest } = useHarvest(pid)\n  const { toastSuccess } = useToast()\n  const { isXl, isLg, isXxl } = useMatchBreakpoints()\n  const isMobile = !isLg && !isXl && !isXxl\n  const { t } = useTranslation()\n\n  return (\n    <ActionContainer>\n      {isMobile && <ListViewContent title={t('Earned')} value={userEarningsUsd} width={100} height={50} ml={10} />}\n      <FarmButton\n        className=\"noClick\"\n        disabled={disabled || pendingTrx}\n        onClick={async () => {\n          setPendingTrx(true)\n          await onHarvest()\n            .then((resp) => {\n              const trxHash = resp.transactionHash\n              toastSuccess(t('Harvest Successful'), {\n                text: t('View Transaction'),\n                url: getEtherscanLink(trxHash, 'transaction', chainId),\n              })\n            })\n            .catch((e) => {\n              console.error(e)\n              setPendingTrx(false)\n            })\n          dispatch(updateFarmUserEarnings(chainId, pid, account))\n          setPendingTrx(false)\n        }}\n        endIcon={pendingTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n      >\n        {t('HARVEST')}\n      </FarmButton>\n      {!isMobile && <ListViewContent title={t('Earned')} value={userEarningsUsd} width={100} height={50} ml={10} />}\n    </ActionContainer>\n  )\n}\n\nexport default React.memo(HarvestAction)\n","/** @jsxImportSource theme-ui */\nimport React from 'react'\nimport { Text } from '@apeswapfinance/uikit'\nimport { Flex, LinkExternal } from '@ape.swap/uikit'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\n\nconst InfoContent: React.FC<{ farm: Farm }> = ({ farm }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const bscScanUrl = `https://bscscan.com/address/${farm.lpAddresses[chainId]}`\n  const { projectLink } = farm\n\n  return (\n    <Flex sx={{ flexDirection: 'column' }}>\n      <Flex sx={{ width: '100%', alignItems: 'space-between', justifyContent: 'space-between' }}>\n        <Text style={{ fontSize: '12px' }}>{t('Multiplier')}</Text>\n        <Text bold style={{ fontSize: '12px' }}>\n          {Math.round(parseFloat(farm.multiplier) * 1000) / 100}X\n        </Text>\n      </Flex>\n      <Flex sx={{ width: '100%', alignItems: 'space-between', justifyContent: 'space-between' }}>\n        <Text style={{ fontSize: '12px' }}>{t('Stake')}</Text>\n        <Text bold style={{ fontSize: '12px' }}>\n          {farm.lpSymbol} {t('LP')}\n        </Text>\n      </Flex>\n      <Flex sx={{ alignItems: 'center', justifyContent: 'center', marginTop: '15px' }}>\n        <LinkExternal href={bscScanUrl} style={{ fontSize: '14px' }}>\n          {t('View on BscScan')}\n        </LinkExternal>\n      </Flex>\n      {projectLink && (\n        <Flex sx={{ alignItems: 'center', justifyContent: 'center', marginTop: '15px' }}>\n          <LinkExternal href={projectLink} style={{ fontSize: '14px' }}>\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default InfoContent\n","import React from 'react'\nimport { Text, Svg, useModal } from '@apeswapfinance/uikit'\nimport { TagVariants } from '@ape.swap/uikit'\nimport { Box } from 'theme-ui'\nimport ListView from 'components/ListView'\nimport { ExtendedListViewProps } from 'components/ListView/types'\nimport { LiquidityModal } from 'components/LiquidityWidget'\nimport ListViewContent from 'components/ListViewContent'\nimport { Farm, Tag } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport CalcButton from 'components/RoiCalculator/CalcButton'\nimport { useTranslation } from 'contexts/Localization'\nimport useIsMobile from 'hooks/useIsMobile'\nimport { Field, selectCurrency } from 'state/swap/actions'\nimport { useAppDispatch } from 'state'\nimport CardActions from './CardActions'\nimport { Container, FarmButton, NextArrow } from './styles'\nimport HarvestAction from './CardActions/HarvestAction'\nimport { ActionContainer, StyledTag } from './CardActions/styles'\nimport InfoContent from '../InfoContent'\n\nconst DisplayFarms: React.FC<{ farms: Farm[]; openPid?: number; farmTags: Tag[] }> = ({ farms, openPid, farmTags }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const isMobile = useIsMobile()\n  const dispatch = useAppDispatch()\n\n  // TODO: clean up this code\n  // Hack to get the close modal function from the provider\n  // Need to export ModalContext from uikit to clean up the code\n  const [, closeModal] = useModal(<></>)\n  const [onPresentAddLiquidityWidgetModal] = useModal(\n    <LiquidityModal handleClose={closeModal} />,\n    true,\n    true,\n    'liquidityWidgetModal',\n  )\n\n  const showLiquidity = (token, quoteToken) => {\n    dispatch(\n      selectCurrency({\n        field: Field.INPUT,\n        currencyId: token,\n      }),\n    )\n    dispatch(\n      selectCurrency({\n        field: Field.OUTPUT,\n        currencyId: quoteToken,\n      }),\n    )\n    onPresentAddLiquidityWidgetModal()\n  }\n\n  const farmsListView = farms.map((farm) => {\n    const [token1, token2] = farm.lpSymbol.split('-')\n    const userAllowance = farm?.userData?.allowance\n    const userEarnings = getBalanceNumber(farm?.userData?.earnings || new BigNumber(0))?.toFixed(2)\n    const userEarningsUsd = `$${(\n      getBalanceNumber(farm?.userData?.earnings || new BigNumber(0)) * farm.bananaPrice\n    ).toFixed(2)}`\n    const userTokenBalance = `${getBalanceNumber(farm?.userData?.tokenBalance || new BigNumber(0))?.toFixed(6)} LP`\n    const userTokenBalanceUsd = `$${(\n      getBalanceNumber(farm?.userData?.tokenBalance || new BigNumber(0)) * farm?.lpValueUsd\n    ).toFixed(2)}`\n    const fTag = farmTags?.find((tag) => tag.pid === farm.pid)\n    const tagColor = fTag?.color as TagVariants\n\n    return {\n      tag: (\n        <>\n          {fTag?.pid === farm.pid && (\n            <Box sx={{ marginRight: '5px', mt: '1px' }}>\n              <StyledTag key={fTag?.pid} variant={tagColor}>\n                {fTag?.text}\n              </StyledTag>\n            </Box>\n          )}\n        </>\n      ),\n      tokens: { token1: farm.pid === 184 ? 'NFTY2' : token1, token2, token3: 'BANANA' },\n      stakeLp: true,\n      title: <Text bold>{farm.lpSymbol}</Text>,\n      open: farm.pid === openPid,\n      id: farm.pid,\n      infoContent: <InfoContent farm={farm} />,\n      infoContentPosition: 'translate(8%, 0%)',\n      toolTipIconWidth: isMobile && '20px',\n      toolTipStyle: isMobile && { marginTop: '5px', marginRight: '10px' },\n      cardContent: (\n        <>\n          <ListViewContent\n            title={t('APY')}\n            value={parseFloat(farm?.apy) > 1000000 ? `>1,000,000%` : `${farm?.apy}%`}\n            width={isMobile ? 90 : 150}\n            ml={20}\n            toolTip={t(\n              'APY includes annualized BANANA rewards and rewards for providing liquidity (DEX swap fees), compounded daily.',\n            )}\n            toolTipPlacement=\"bottomLeft\"\n            toolTipTransform=\"translate(8%, 0%)\"\n          />\n          <ListViewContent\n            title={t('APR')}\n            value={`${farm?.apr}%`}\n            value2={`${farm?.lpApr}%`}\n            value2Icon={\n              <span style={{ marginRight: '7px' }}>\n                <Svg icon=\"swap\" width={13} color=\"text\" />\n              </span>\n            }\n            valueIcon={\n              <span style={{ marginRight: '5px' }}>\n                <Svg icon=\"banana_token\" width={15} color=\"text\" />\n              </span>\n            }\n            width={isMobile ? 100 : 180}\n            toolTip={t(\n              'BANANA reward APRs are calculated in real time. DEX swap fee APRs are calculated based on previous 24 hours of trading volume. Note: APRs are provided for your convenience. APRs are constantly changing and do not represent guaranteed returns.',\n            )}\n            toolTipPlacement=\"bottomLeft\"\n            toolTipTransform=\"translate(8%, 0%)\"\n            aprCalculator={\n              <CalcButton\n                label={farm.lpSymbol}\n                rewardTokenName=\"BANANA\"\n                rewardTokenPrice={farm.bananaPrice}\n                apr={parseFloat(farm?.apr)}\n                lpApr={parseFloat(farm?.lpApr)}\n                apy={parseFloat(farm?.apy)}\n                lpAddress={farm.lpAddresses[chainId]}\n                isLp\n                tokenAddress={farm.tokenAddresses[chainId]}\n                quoteTokenAddress={farm.quoteTokenSymbol === 'BNB' ? 'ETH' : farm.quoteTokenAdresses[chainId]}\n              />\n            }\n          />\n          <ListViewContent\n            title={t('Liquidity')}\n            value={`$${Number(farm?.totalLpStakedUsd).toLocaleString(undefined)}`}\n            width={isMobile ? 100 : 180}\n            toolTip={t('The total value of the LP tokens currently staked in this farm.')}\n            toolTipPlacement={isMobile ? 'bottomRight' : 'bottomLeft'}\n            toolTipTransform={isMobile ? 'translate(13%, 0%)' : 'translate(23%, 0%)'}\n          />\n          <ListViewContent title={t('Earned')} value={userEarnings} width={isMobile ? 65 : 120} />\n        </>\n      ),\n      expandedContent: (\n        <>\n          <ActionContainer>\n            {isMobile && (\n              <ListViewContent\n                title={t('Available LP')}\n                value={userTokenBalance}\n                value2={userTokenBalanceUsd}\n                value2Secondary\n                width={100}\n                height={50}\n                lineHeight={15}\n                ml={10}\n              />\n            )}\n\n            <FarmButton\n              onClick={() =>\n                showLiquidity(\n                  farm.tokenAddresses[chainId],\n                  farm.quoteTokenSymbol === 'BNB' ? 'ETH' : farm.quoteTokenAdresses[chainId],\n                )\n              }\n            >\n              {t('GET LP')}\n            </FarmButton>\n            {!isMobile && (\n              <ListViewContent\n                title={t('Available LP')}\n                value={userTokenBalance}\n                value2={userTokenBalanceUsd}\n                value2Secondary\n                width={100}\n                height={50}\n                lineHeight={15}\n                ml={10}\n              />\n            )}\n          </ActionContainer>\n          {!isMobile && <NextArrow />}\n          <CardActions\n            allowance={userAllowance?.toString()}\n            stakedBalance={farm?.userData?.stakedBalance?.toString()}\n            stakingTokenBalance={farm?.userData?.tokenBalance?.toString()}\n            stakeLpAddress={farm.lpAddresses[chainId]}\n            lpValueUsd={farm.lpValueUsd}\n            pid={farm.pid}\n          />\n          {!isMobile && <NextArrow />}\n          <HarvestAction pid={farm.pid} disabled={userEarnings === '0.00'} userEarningsUsd={userEarningsUsd} />\n        </>\n      ),\n    } as ExtendedListViewProps\n  })\n\n  return (\n    <Container>\n      <ListView listViews={farmsListView} />\n    </Container>\n  )\n}\n\nexport default React.memo(DisplayFarms)\n","import React, { useState } from 'react'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport { AutoRenewIcon, Button } from '@apeswapfinance/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { updateFarmUserEarnings } from 'state/farms'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { ActionContainer } from './styles'\n\ninterface HarvestActionsProps {\n  pids: number[]\n  disabled: boolean\n}\n\nconst HarvestAllAction: React.FC<HarvestActionsProps> = ({ pids, disabled }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onReward } = useAllHarvest(pids, chainId)\n  const { t } = useTranslation()\n\n  return (\n    <ActionContainer>\n      <Button\n        size=\"mds\"\n        className=\"noClick\"\n        disabled={disabled || pendingTrx}\n        onClick={async () => {\n          setPendingTrx(true)\n          await onReward().catch((e) => {\n            console.error(e)\n            setPendingTrx(false)\n          })\n          pids.map((pid) => {\n            return dispatch(updateFarmUserEarnings(chainId, pid, account))\n          })\n          setPendingTrx(false)\n        }}\n        endIcon={pendingTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n      >\n        {t('HARVEST ALL')} ({pids.length})\n      </Button>\n    </ActionContainer>\n  )\n}\n\nexport default React.memo(HarvestAllAction)\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Flex } from '@apeswapfinance/uikit'\nimport { useFetchFarmLpAprs } from 'state/hooks'\nimport ListViewMenu from 'components/ListViewMenu'\nimport { orderBy } from 'lodash'\nimport ListViewLayout from 'components/layout/ListViewLayout'\nimport Banner from 'components/Banner'\nimport { useTranslation } from 'contexts/Localization'\nimport { Farm } from 'state/types'\nimport { useFarms, useFarmTags, usePollFarms, useSetFarms, useFarmOrderings } from 'state/farms/hooks'\nimport DisplayFarms from './components/DisplayFarms'\nimport { BLUE_CHIPS, NUMBER_OF_FARMS_VISIBLE, STABLES } from './constants'\nimport HarvestAllAction from './components/CardActions/HarvestAllAction'\n\nconst Farms: React.FC = () => {\n  useSetFarms()\n  usePollFarms()\n  const { account, chainId } = useActiveWeb3React()\n  useFetchFarmLpAprs(chainId)\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const farmsLP = useFarms(account)\n  const { search } = window.location\n  const params = new URLSearchParams(search)\n  const urlSearchedFarm = parseInt(params.get('pid'))\n  const [query, setQuery] = useState('')\n  const [sortOption, setSortOption] = useState('all')\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const { farmTags } = useFarmTags(chainId)\n  const { farmOrderings } = useFarmOrderings(chainId)\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedOnlyInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const hasHarvestPids = [...activeFarms, ...inactiveFarms]\n    .filter((farm) => farm.userData && new BigNumber(farm.userData.earnings).isGreaterThan(0))\n    .map((filteredFarm) => {\n      return filteredFarm.pid\n    })\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const renderFarms = () => {\n    let farms = isActive ? activeFarms : inactiveFarms\n\n    if (urlSearchedFarm) {\n      const farmCheck =\n        activeFarms?.find((farm) => {\n          return farm.pid === urlSearchedFarm\n        }) !== undefined\n      if (farmCheck) {\n        farms = [\n          activeFarms?.find((farm) => {\n            return farm.pid === urlSearchedFarm\n          }),\n          ...activeFarms?.filter((farm) => {\n            return farm.pid !== urlSearchedFarm\n          }),\n        ]\n      }\n    }\n\n    if (stakedOnly) {\n      farms = isActive ? stakedOnlyFarms : stakedOnlyInactiveFarms\n    }\n\n    if (query) {\n      farms = farms.filter((farm) => {\n        return farm.lpSymbol.toUpperCase().includes(query.toUpperCase())\n      })\n    }\n\n    switch (sortOption) {\n      case 'all':\n        return farmOrderings\n          ? orderBy(\n              farms,\n              (farm: Farm) => farmOrderings.find((ordering) => ordering.pid === farm.pid)?.order,\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n      case 'stables':\n        return farms\n          .filter((farm) => STABLES.includes(farm.tokenSymbol) && STABLES.includes(farm.quoteTokenSymbol))\n          .slice(0, numberOfFarmsVisible)\n      case 'apr':\n        return orderBy(farms, (farm) => parseFloat(farm.apy), 'desc').slice(0, numberOfFarmsVisible)\n      case 'blueChips':\n        return farms\n          .filter((farm) => BLUE_CHIPS.includes(farm.tokenSymbol) || BLUE_CHIPS.includes(farm.quoteTokenSymbol))\n          .slice(0, numberOfFarmsVisible)\n      case 'liquidity':\n        return orderBy(farms, (farm: Farm) => parseFloat(farm.totalLpStakedUsd), 'desc').slice(0, numberOfFarmsVisible)\n      case 'hot':\n        return farmTags\n          ? orderBy(\n              farms,\n              (farm: Farm) => farmTags?.find((tag) => tag.pid === farm.pid && tag.text.toLowerCase() === 'hot'),\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n      case 'new':\n        return farmTags\n          ? orderBy(\n              farms,\n              (farm: Farm) => farmTags?.find((tag) => tag.pid === farm.pid && tag.text.toLowerCase() === 'new'),\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n      default:\n        return farmOrderings\n          ? orderBy(\n              farms,\n              (farm: Farm) => farmOrderings.find((ordering) => ordering.pid === farm.pid)?.order,\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n    }\n  }\n\n  return (\n    <>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        mb=\"100px\"\n        style={{ position: 'relative', top: '30px', width: '100%' }}\n      >\n        <ListViewLayout>\n          <Banner banner=\"banana-farms\" link=\"?modal=1\" title={t('Banana Farms')} listViewBreak maxWidth={1130} />\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\n            <ListViewMenu\n              onHandleQueryChange={handleChangeQuery}\n              onSetSortOption={setSortOption}\n              onSetStake={setStakedOnly}\n              harvestAll={<HarvestAllAction pids={hasHarvestPids} disabled={hasHarvestPids.length === 0} />}\n              stakedOnly={stakedOnly}\n              query={query}\n              activeOption={sortOption}\n              showMonkeyImage\n            />\n          </Flex>\n          <DisplayFarms farms={renderFarms()} openPid={urlSearchedFarm} farmTags={farmTags} />\n        </ListViewLayout>\n      </Flex>\n      <div ref={loadMoreRef} />\n    </>\n  )\n}\n\nexport default React.memo(Farms)\n"],"sourceRoot":""}