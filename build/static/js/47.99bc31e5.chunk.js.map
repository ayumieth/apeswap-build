{"version":3,"sources":["state/dualFarms/hooks.ts","views/DualFarms/components/CardActions/styles.ts","views/DualFarms/components/CardActions/HarvestAllAction.tsx","views/DualFarms/components/CardActions/ApprovalAction.tsx","views/DualFarms/components/Modals/DepositModal.tsx","views/DualFarms/components/Modals/WithdrawModal.tsx","views/DualFarms/components/CardActions/StakeActions.tsx","views/DualFarms/components/CardActions/index.tsx","views/DualFarms/components/styles.ts","views/DualFarms/components/CardActions/HarvestAction.tsx","views/DualFarms/components/DisplayFarms.tsx","views/DualFarms/DualFarms.tsx"],"names":["useDualFarms","account","slowRefresh","useRefresh","dispatch","useAppDispatch","chainId","useActiveWeb3React","useEffect","ChainId","MATIC","MATIC_TESTNET","fetchDualFarmUserDataAsync","farms","useSelector","state","dualFarms","data","StyledButton","styled","Button","SmallButton","ActionContainer","Flex","theme","mediaQueries","md","CenterContainer","HarvestAllAction","pids","disabled","t","useTranslation","useState","pendingTrx","setPendingTrx","onReward","useAllHarvest","size","className","onClick","a","catch","e","console","error","endIcon","spin","color","length","React","memo","ApprovalAction","stakingTokenContractAddress","pid","isLoading","stakingTokenContract","useERC20","onApprove","useDualFarmApprove","toastSuccess","useToast","width","height","then","resp","trxHash","transactionHash","text","url","getEtherscanLink","DepositModal","max","onConfirm","onDismiss","tokenName","addLiquidityUrl","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","BigNumber","handleChange","useCallback","currentTarget","value","handleSelectMax","title","ModalInput","onSelectMax","onChange","symbol","inputTitle","fullWidth","parseFloat","style","borderRadius","WithdrawModal","StakeAction","stakingTokenBalance","stakedBalance","lpValueUsd","rawStakedBalance","getBalanceNumber","userStakedBalanceUsd","toFixed","pendingDepositTrx","setPendingDepositTrx","pendingWithdrawTrx","setPendingWithdrawTrx","useMatchBreakpoints","isXl","isLg","isXxl","isMobile","firstStake","gt","onStake","useDualFarmStake","onUnstake","useMiniChefUnstake","useModal","onPresentDeposit","href","onPresentWithdraw","ListViewContent","value2","value2Secondary","lineHeight","ml","mr","fontWeight","renderStakingButtons","CardActions","allowance","stakeLpAddress","UnlockButton","table","actionToRender","FarmButton","NextArrow","ArrowDropUpIcon","Container","ServiceTokenDisplayContainer","div","StyledTag","Tag","HarvestAction","userEarningsUsd","useMiniChefHarvest","DisplayFarms","openPid","dualFarmTags","useIsMobile","closeModal","handleClose","onPresentAddLiquidityWidgetModal","farmsListView","map","farm","i","polygonScanUrl","stakeTokenAddress","userAllowance","userData","userEarningsMiniChef","miniChefEarnings","userEarningsRewarder","rewarderEarnings","rewardToken0Price","rewardToken1Price","userTokenBalance","tokenBalance","stakeTokenPrice","userTokenBalanceUsd","fTag","find","tag","tagColor","sx","marginRight","mt","variant","tokens","token1","stakeTokens","token2","token0","token3","rewardTokens","token4","dualImage","stakeLp","bold","viewType","open","id","infoContent","flexDirection","alignItems","justifyContent","fontSize","Math","round","multiplier","ttWidth","infoContentPosition","toolTipIconWidth","toolTipStyle","marginTop","cardContent","apy","toolTip","toolTipPlacement","toolTipTransform","apr","lpApr","value2Icon","icon","valueIcon","aprCalculator","CalcButton","label","rewardTokenName","rewardTokenPrice","lpAddress","isLp","tokenAddress","address","quoteTokenAddress","lpPrice","Number","totalStaked","toLocaleString","undefined","ServiceTokenDisplay","expandedContent","token","quoteToken","selectCurrency","field","Field","INPUT","currencyId","OUTPUT","toString","ListView","listViews","search","window","location","params","URLSearchParams","urlSearchedFarm","parseInt","get","DualFarms","useFetchLpTokenPrices","useFetchTokenPrices","setInitialDualFarmDataAsync","useSetDualFarms","tokenPrices","useTokenPrices","bananaPrice","usePriceBananaBusd","farmLpAprs","useFarmLpAprs","fetchDualFarmsPublicDataAsync","usePollDualFarms","useFetchFarmLpAprs","farmTags","useFarmTags","farmOrderings","useFarmOrderings","pathname","useLocation","observerIsSet","setObserverIsSet","farmsLP","query","setQuery","sortOption","setSortOption","stakedOnly","setStakedOnly","isActive","includes","activeFarms","filter","inactiveFarms","stakedOnlyFarms","isGreaterThan","stakedOnlyInactiveFarms","hasHarvestPids","plus","filteredFarm","NUMBER_OF_FARMS_VISIBLE","numberOfFarmsVisible","setNumberOfFarmsVisible","loadMoreRef","useRef","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","current","mb","position","top","ListViewLayout","Banner","banner","link","listViewBreak","maxWidth","ListViewMenu","onHandleQueryChange","event","target","onSetSortOption","onSetStake","harvestAll","activeOption","showMonkeyImage","toUpperCase","orderBy","ordering","order","slice","STABLES","toLowerCase","BLUE_CHIPS","renderFarms","ref"],"mappings":"kVA+BaA,EAAe,SAACC,GAC3B,IAAQC,EAAgBC,cAAhBD,YACFE,EAAWC,cACTC,EAAYC,cAAZD,QACRE,qBAAU,YACJP,GAAYK,IAAYG,IAAQC,OAASJ,IAAYG,IAAQE,eAC/DP,EAASQ,YAA2BN,EAASL,MAE9C,CAACA,EAASG,EAAUF,EAAaI,IACpC,IAAMO,EAAQC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,UAAUC,QAC5D,OAAOJ,G,uGCtCIK,EAAeC,YAAOC,IAAPD,CAAH,0JASZE,EAAcF,YAAOC,IAAPD,CAAH,iEAKXG,EAAkBH,YAAOI,IAAPJ,CAAH,+GAGxB,qBAAGK,MAAkBC,aAAaC,MAKzBC,EAAkBR,YAAOI,IAAPJ,CAAH,oIAGxB,qBAAGK,MAAkBC,aAAaC,M,OChBhCE,EAAkD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACvDxB,EAAYC,cAAZD,QACAyB,EAAMC,cAAND,EACR,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACQC,EAAaC,YAAcR,EAAMvB,GAAjC8B,SAER,OACE,cAACd,EAAD,UACE,eAAC,IAAD,CACEgB,KAAK,MACLC,UAAU,UACVT,SAAUA,GAAYI,EACtBM,QAAO,sBAAE,sBAAAC,EAAA,6DACPN,GAAc,GADP,SAEDC,IAAWM,OAAM,SAACC,GACtBC,QAAQC,MAAMF,GACdR,GAAc,MAJT,OAMPA,GAAc,GANP,2CAQTW,QAASZ,GAAc,cAAC,IAAD,CAAea,MAAI,EAACC,MAAM,iBAZnD,UAcGjB,EAAE,eAdL,KAcuBF,EAAKoB,OAd5B,UAoBSC,MAAMC,KAAKvB,G,yECxBpBwB,GAAgD,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,4BAA6BC,EAA6B,EAA7BA,IAA6B,IAAxBC,iBAAwB,SACzGjD,EAAYC,cAAZD,QACAyB,EAAMC,cAAND,EACFyB,EAAuBC,aAASJ,GACtC,EAAoCpB,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACQuB,EAAcC,aAAmBH,EAAsBF,GAAvDI,UACAE,EAAiBC,cAAjBD,aAER,OACE,mCACGL,EACC,cAAC,KAAD,CAAUO,MAAM,OAAOC,OAAO,SAE9B,cAAC7C,EAAD,CACEqB,UAAU,UACVT,SAAUI,EACVM,QAAO,sBAAE,sBAAAC,EAAA,6DACPN,GAAc,GADP,SAEDuB,IACHM,MAAK,SAACC,GACL,IAAMC,GAAmB,IAATD,EAAiBA,EAAKE,gBAAkB,GACxDP,EAAa7B,EAAE,sBAAuB,CACpCqC,KAAMrC,EAAE,oBACRsC,IAAKC,aAAiBJ,EAAS,cAAe5D,QAGjDoC,OAAM,SAACC,GACNC,QAAQC,MAAMF,GACdR,GAAc,MAZX,OAcPA,GAAc,GAdP,2CAgBTW,QAASZ,GAAc,cAAC,IAAD,CAAea,MAAI,EAACC,MAAM,iBAnBnD,SAqBGjB,EAAE,eAOEmB,OAAMC,KAAKC,I,8BC1CpBmB,GAA4C,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,IAAKC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,UAAiD,IAAtCC,iBAAsC,MAA1B,GAA0B,EAAtBC,EAAsB,EAAtBA,gBAC9F,EAAsB3C,mBAAS,IAA/B,mBAAO4C,EAAP,KAAYC,EAAZ,KACA,EAAkC7C,oBAAS,GAA3C,mBAAO8C,EAAP,KAAkBC,EAAlB,KACQjD,EAAMC,cAAND,EACFkD,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsB,IAAIC,IAAUZ,MAC1C,CAACA,IAEEa,EAAeC,uBACnB,SAAC3C,GACCmC,EAAOnC,EAAE4C,cAAcC,SAEzB,CAACV,IAGGW,EAAkBH,uBAAY,WAClCR,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOY,MAAO3D,EAAE,mBAAoB2C,UAAWA,EAA/C,UACE,cAACiB,GAAA,EAAD,CACEH,MAAOX,EACPe,YAAaH,EACbI,SAAUR,EACVb,IAAKS,EACLa,OAAQnB,EACRC,gBAAiBA,EACjBmB,WAAYhE,EAAE,WAEhB,cAAC,IAAD,CAAa2C,UAAWA,EAAxB,SACE,cAAC,IAAD,CACEsB,WAAS,EACTlE,SAAUiD,GAA6B,MAAhBE,GAA+B,MAARJ,GAAeoB,WAAWhB,GAAegB,WAAWpB,GAClGrC,QAAO,sBAAE,sBAAAC,EAAA,6DACPuC,GAAa,GADN,kBAGCP,EAAUI,GAHX,OAILH,IAJK,gDAML9B,QAAQC,MAAM,sBANT,yBAQLmC,GAAa,GARR,4EAWTlC,QAASiC,GAAa,cAAC,IAAD,CAAehC,MAAI,EAACC,MAAM,iBAChDkD,MAAO,CACLC,aAAc,QAhBlB,SAmBepE,EAAZgD,EAAc,uBAA4B,mBAOtC7B,OAAMC,KAAKoB,IC1DpB6B,GAA8C,SAAC,GAAmD,IAAjD3B,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWF,EAA0B,EAA1BA,IAA0B,IAArBG,iBAAqB,MAAT,GAAS,EACrG,EAAsB1C,mBAAS,IAA/B,mBAAO4C,EAAP,KAAYC,EAAZ,KACA,EAAkC7C,oBAAS,GAA3C,mBAAO8C,EAAP,KAAkBC,EAAlB,KACQjD,EAAMC,cAAND,EACFkD,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsB,IAAIC,IAAUZ,MAC1C,CAACA,IAEEa,EAAeC,uBACnB,SAAC3C,GACCmC,EAAOnC,EAAE4C,cAAcC,SAEzB,CAACV,IAGGW,EAAkBH,uBAAY,WAClCR,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOY,MAAO3D,EAAE,qBAAsB2C,UAAWA,EAAjD,UACE,cAACiB,GAAA,EAAD,CACEC,YAAaH,EACbI,SAAUR,EACVG,MAAOX,EACPL,IAAKS,EACLa,OAAQnB,EACRoB,WAAYhE,EAAE,aAEhB,cAAC,IAAD,CAAa2C,UAAWA,EAAxB,SACE,cAAC,IAAD,CACE5C,SAAUiD,GAAakB,WAAWhB,GAAegB,WAAWpB,GAC5DrC,QAAO,sBAAE,sBAAAC,EAAA,6DACPuC,GAAa,GADN,kBAGCP,EAAUI,GAHX,OAILH,IAJK,gDAML9B,QAAQC,MAAM,sBANT,yBAQLmC,GAAa,GARR,4EAWTgB,WAAS,EACTlD,QAASiC,GAAa,cAAC,IAAD,CAAehC,MAAI,EAACC,MAAM,iBAChDkD,MAAO,CACLC,aAAc,QAhBlB,SAmBepE,EAAZgD,EAAc,uBAA4B,mBAOtC7B,OAAMC,KAAKiD,ICvCpBC,GAA2C,SAAC,GAA6D,IAAD,EAA1DC,EAA0D,EAA1DA,oBAAqBC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,WAAYlD,EAAU,EAAVA,IAC5FmD,EAAmBC,YAAiB,IAAItB,IAAUmB,IAChDjG,EAAYC,cAAZD,QACAyB,EAAMC,cAAND,EACF4E,EAAoB,YACxBD,YAAiB,IAAItB,IAAUmB,IAAkB,IAAInB,IAAU,IAAMoB,GACrEI,QAAQ,IACV,EAAkD3E,oBAAS,GAA3D,mBAAO4E,EAAP,KAA0BC,EAA1B,KACA,EAAoD7E,oBAAS,GAA7D,mBAAO8E,EAAP,KAA2BC,EAA3B,KACQpD,EAAiBC,cAAjBD,aACR,EAA8BqD,eAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,MACdC,GAAYF,IAASD,IAASE,EAC9BE,IAAa,UAAC,IAAIlC,IAAUmB,UAAf,OAAC,EAA8BgB,GAAG,IAE7CC,EAAYC,aAAiBnE,GAA7BkE,QACAE,EAAcC,aAAmBrE,GAAjCoE,UAER,EAA2BE,aACzB,cAAC,GAAD,CACEpD,IAAK8B,EACL7B,UAAS,uCAAE,WAAOI,GAAP,SAAApC,EAAA,6DACTqE,GAAqB,GADZ,SAEHU,EAAQ3C,GACXb,MAAK,SAACC,GACL,IAAMC,EAAUD,EAAKE,gBACrBP,EAAa7B,EAAE,sBAAuB,CACpCqC,KAAMrC,EAAE,oBACRsC,IAAKC,aAAiBJ,EAAS,cAAe5D,QAGjDoC,OAAM,SAACC,GACNC,QAAQC,MAAMF,GACdmE,GAAqB,MAZhB,OAcTA,GAAqB,GAdZ,2CAAF,yDAHNe,EAAP,oBAsBA,EAA4BD,aAC1B,cAAC,GAAD,CACEpD,IAAK+B,EACL9B,UAAS,uCAAE,WAAOI,GAAP,SAAApC,EAAA,6DACTuE,GAAsB,GADb,SAEHU,EAAU7C,GACbb,MAAK,SAACC,GACL,IAAMC,EAAUD,EAAKE,gBACrBP,EACE7B,EAAE,uBACF,cAAC,IAAD,CAAc+F,KAAMxD,aAAiBJ,EAAS,cAAe5D,GAA7D,SACE,eAAC,KAAD,eAAQyB,EAAE,oBAAV,aAILW,OAAM,SAACC,GACNC,QAAQC,MAAMF,GACdqE,GAAsB,MAdjB,OAgBTA,GAAsB,GAhBb,2CAAF,yDAHNe,EAAP,oBAqFA,OA7D6B,WAAO,IAAD,EACjC,OAAIT,EAEA,cAAC3F,EAAD,UACE,cAACT,EAAD,CACEsB,QAASqF,EACT/E,QAAS+D,GAAqB,cAAC,IAAD,CAAe9D,MAAI,EAACC,MAAM,iBACxDlB,SAAU+E,EAHZ,SAKG9E,EAAE,eAMT,eAACT,EAAD,WACG+F,GACC,cAACW,EAAA,EAAD,CACEtC,MAAO3D,EAAE,aACTyD,MAAK,UAAKiB,EAAiBG,QAAQ,GAA9B,OACLqB,OAAQtB,EACRuB,iBAAe,EACfpE,MAAO,IACPC,OAAQ,GACRoE,WAAY,GACZC,GAAI,KAGR,eAAC,IAAD,WACE,cAAC/G,EAAD,CACEmB,QAASuF,EACTjF,QAASiE,GAAsB,cAAC,IAAD,CAAehE,MAAI,EAACC,MAAM,iBACzDlB,SAAUiF,EACVsB,GAAG,MAJL,SAME,cAAC,IAAD,CAAWrF,MAAM,QAAQc,MAAM,OAAOC,OAAO,OAAOuE,WAAY,QAElE,cAACjH,EAAD,CACEmB,QAASqF,EACT/E,QAAS+D,GAAqB,cAAC,IAAD,CAAe9D,MAAI,EAACC,MAAM,iBACxDlB,SAAU+E,KAAqB,UAAC,IAAIzB,IAAUkB,UAAf,OAAC,EAAoCiB,GAAG,IAHzE,SAKE,cAAC,IAAD,CAASvE,MAAM,QAAQc,MAAM,OAAOC,OAAO,OAAOuE,WAAY,YAGhEjB,GACA,cAACW,EAAA,EAAD,CACEtC,MAAO3D,EAAE,aACTyD,MAAK,UAAKiB,EAAiBG,QAAQ,GAA9B,OACLqB,OAAQtB,EACRuB,iBAAe,EACfpE,MAAO,IACPC,OAAQ,GACRoE,WAAY,GACZC,GAAI,QAOPG,IAGMrF,OAAMC,KAAKkD,I,UC3IpBmC,GAAyC,SAAC,GAOzC,IANLC,EAMI,EANJA,UACAnC,EAKI,EALJA,oBACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,WACAkC,EAEI,EAFJA,eACApF,EACI,EADJA,IAEQrD,EAAYM,cAAZN,QAyBR,OAxBuB,WAAO,IAAD,EAC3B,OAAKA,EAOD,UAAC,IAAImF,IAAUqD,UAAf,OAAC,EAA0BlB,GAAG,GAQhC,cAAC,GAAD,CACEhB,cAAeA,EACfD,oBAAqBA,EACrBE,WAAYA,EACZlD,IAAKA,IAVL,cAAC3B,EAAD,UACE,cAAC,GAAD,CAAgB0B,4BAA6BqF,EAAgBpF,IAAKA,MARpE,cAAC3B,EAAD,UACE,cAACgH,GAAA,EAAD,CAAcC,OAAK,MAoBpBC,IAGM3F,OAAMC,KAAKqF,I,QCnDbM,GAAa3H,YAAOC,IAAPD,CAAH,0JASV4H,GAAY5H,YAAO6H,IAAP7H,CAAH,yDAIT8H,GAAY9H,YAAOI,IAAPJ,CAAH,oJAQT+H,GAA+B/H,IAAOgI,IAAV,wEAK5BC,GAAYjI,YAAOkI,KAAPlI,CAAH,sLCbhBmI,GAA+C,SAAC,GAAwC,IAAtChG,EAAqC,EAArCA,IAAKxB,EAAgC,EAAhCA,SAAUyH,EAAsB,EAAtBA,gBAC7DjJ,EAAYC,cAAZD,QACAyB,EAAMC,cAAND,EACR,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACQC,EAAaoH,YAAmBlG,GAAhClB,SACAwB,EAAiBC,cAAjBD,aACR,EAA8BqD,eAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,MACdC,GAAYF,IAASD,IAASE,EAEpC,OACE,eAAC9F,EAAD,WACG+F,GAAY,cAACW,EAAA,EAAD,CAAiBtC,MAAO3D,EAAE,UAAWyD,MAAO+D,EAAiBzF,MAAO,IAAKC,OAAQ,GAAIqE,GAAI,KACtG,cAACU,GAAD,CACEvG,UAAU,UACVT,SAAUA,GAAYI,EACtBM,QAAO,sBAAE,sBAAAC,EAAA,6DACPN,GAAc,GADP,SAEDC,IACH4B,MAAK,SAACC,GACL,IAAMC,EAAUD,EAAKE,gBACrBP,EAAa7B,EAAE,sBAAuB,CACpCqC,KAAMrC,EAAE,oBACRsC,IAAKC,aAAiBJ,EAAS,cAAe5D,QAGjDoC,OAAM,SAACC,GACNC,QAAQC,MAAMF,GACdR,GAAc,MAZX,OAcPA,GAAc,GAdP,2CAgBTW,QAASZ,GAAc,cAAC,IAAD,CAAea,MAAI,EAACC,MAAM,iBAnBnD,SAqBGjB,EAAE,cAEHsF,GAAY,cAACW,EAAA,EAAD,CAAiBtC,MAAO3D,EAAE,UAAWyD,MAAO+D,EAAiBzF,MAAO,IAAKC,OAAQ,GAAIqE,GAAI,SAK9FlF,OAAMC,KAAKmG,I,wCClCpBG,GAAuF,SAAC,GAIvF,IAHL5I,EAGI,EAHJA,MACA6I,EAEI,EAFJA,QACAC,EACI,EADJA,aAEQrJ,EAAYC,cAAZD,QACAyB,EAAMC,cAAND,EACFsF,EAAWuC,eACXxJ,EAAWC,cAKjB,EAAuBuH,aAAS,8BAAvBiC,EAAT,oBACA,EAA2CjC,aACzC,cAAC,KAAD,CAAgBkC,YAAaD,KAC7B,GACA,EACA,wBAJKE,EAAP,oBAuBMC,EAAgBnJ,EAAMoJ,KAAI,SAACC,EAAMC,GAAO,IAAD,8EACrCC,GAAc,0CAAsCF,EAAKG,mBACzDC,GAAa,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAMK,gBAAT,aAAG,EAAgB9B,UAChC+B,GAAuB9D,aAAqB,OAAJwD,QAAI,IAAJA,GAAA,UAAAA,EAAMK,gBAAN,eAAgBE,mBAAoB,IAAIrF,IAAU,IAAIwB,QAAQ,GACtG8D,GAAuBhE,aAAqB,OAAJwD,QAAI,IAAJA,GAAA,UAAAA,EAAMK,gBAAN,eAAgBI,mBAAoB,IAAIvF,IAAU,IAAIwB,QAAQ,GACtG2C,GAAe,YACnB7C,aAAqB,OAAJwD,QAAI,IAAJA,GAAA,UAAAA,EAAMK,gBAAN,eAAgBE,mBAAoB,IAAIrF,IAAU,KAAnE,OAAyE8E,QAAzE,IAAyEA,OAAzE,EAAyEA,EAAMU,mBAC/ElE,aAAqB,OAAJwD,QAAI,IAAJA,GAAA,UAAAA,EAAMK,gBAAN,eAAgBI,mBAAoB,IAAIvF,IAAU,KAAnE,OAAyE8E,QAAzE,IAAyEA,OAAzE,EAAyEA,EAAMW,oBAC/EjE,QAAQ,IACJkE,GAAgB,oBAAMpE,aAAqB,OAAJwD,QAAI,IAAJA,GAAA,UAAAA,EAAMK,gBAAN,eAAgBQ,eAAgB,IAAI3F,IAAU,WAArE,aAAM,EAAoEwB,QAAQ,GAAlF,OAEhBJ,GAAU,OAAG0D,QAAH,IAAGA,OAAH,EAAGA,EAAMc,gBAEnBC,GAAmB,YACvBvE,aAAqB,OAAJwD,QAAI,IAAJA,GAAA,UAAAA,EAAMK,gBAAN,eAAgBQ,eAAgB,IAAI3F,IAAU,IAAMoB,IACrEI,QAAQ,IAEJsE,GAAI,OAAGvB,QAAH,IAAGA,OAAH,EAAGA,EAAcwB,MAAK,SAACC,GAAD,OAASA,EAAI9H,MAAQ4G,EAAK5G,OACpD+H,GAAQ,OAAGH,SAAH,IAAGA,QAAH,EAAGA,GAAMlI,MAGvB,MAAO,CACLoI,IACE,oCACO,OAAJF,SAAI,IAAJA,QAAA,EAAAA,GAAM5H,OAAQ4G,EAAK5G,KAClB,cAAC,IAAD,CAAKgI,GAAI,CAAEC,YAAa,MAAOC,GAAI,OAAnC,SACE,cAACpC,GAAD,CAA2BqC,QAASJ,GAApC,gBACGH,SADH,IACGA,QADH,EACGA,GAAM9G,MADT,OAAgB8G,SAAhB,IAAgBA,QAAhB,EAAgBA,GAAM5H,SAO9BoI,OAAQ,CACNC,OAAqB,KAAbzB,EAAK5G,IAAa,QAAlB,OAA4B4G,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAM0B,mBAAlC,iBAA4B,EAAmBD,cAA/C,aAA4B,EAA2B7F,OAC/D+F,OAAM,OAAE3B,QAAF,IAAEA,GAAF,UAAEA,EAAM0B,mBAAR,iBAAE,EAAmBE,cAArB,aAAE,EAA2BhG,OACnCiG,OAAM,OAAE7B,QAAF,IAAEA,GAAF,UAAEA,EAAM8B,oBAAR,iBAAE,EAAoBF,cAAtB,aAAE,EAA4BhG,OACpCmG,QAA4B,KAAhB,OAAJ/B,QAAI,IAAJA,OAAA,EAAAA,EAAMgC,WAAoC,KAAbhC,EAAK5G,IAAa,QAAlB,OAA4B4G,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAM8B,oBAAlC,iBAA4B,EAAoBL,cAAhD,aAA4B,EAA4B7F,OAAU,MAEzGqG,SAAS,EACTzG,MACE,eAAC,KAAD,CAAM0C,IAAQ,OAAJ8C,SAAI,IAAJA,QAAA,EAAAA,GAAM5H,QAAN,OAAc4G,QAAd,IAAcA,OAAd,EAAcA,EAAM5G,KAAM,EAAI,GAAI8I,MAAI,EAAhD,iBACGlC,QADH,IACGA,GADH,UACGA,EAAM0B,mBADT,iBACG,EAAmBD,cADtB,aACG,EAA2B7F,OAD9B,WACuCoE,QADvC,IACuCA,GADvC,UACuCA,EAAM0B,mBAD7C,iBACuC,EAAmBE,cAD1D,aACuC,EAA2BhG,UAGpEuG,SAAU,UACVC,KAAMpC,EAAK5G,MAAQoG,EACnB6C,GAAIrC,EAAK5G,IACTkJ,YACE,mCACE,eAAC,IAAD,CAAMC,cAAc,SAApB,UACE,eAAC,IAAD,CAAMC,WAAW,gBAAgBC,eAAe,gBAAgBzG,MAAO,CAAEpC,MAAO,QAAhF,UACE,cAAC,KAAD,CAAMoC,MAAO,CAAE0G,SAAU,QAAzB,wBACA,eAAC,KAAD,CAAMR,MAAI,EAAClG,MAAO,CAAE0G,SAAU,QAA9B,UACGC,KAAKC,MAAoC,IAA9B7G,WAAWiE,EAAK6C,aAAsB,IADpD,UAIF,eAAC,IAAD,CAAML,WAAW,gBAAgBC,eAAe,gBAAgBzG,MAAO,CAAEpC,MAAO,QAAhF,UACE,cAAC,KAAD,CAAMoC,MAAO,CAAE0G,SAAU,QAAzB,mBACA,eAAC,KAAD,CAAMR,MAAI,EAAClG,MAAO,CAAE0G,SAAU,QAA9B,iBACG1C,QADH,IACGA,GADH,UACGA,EAAM0B,mBADT,iBACG,EAAmBD,cADtB,aACG,EAA2B7F,OAD9B,WACuCoE,QADvC,IACuCA,GADvC,UACuCA,EAAM0B,mBAD7C,iBACuC,EAAmBE,cAD1D,aACuC,EAA2BhG,OADlE,YAIF,cAAC,IAAD,CAAM4G,WAAW,SAASC,eAAe,SAASnB,GAAG,OAArD,SACE,cAAC,IAAD,CAAc1D,KAAMsC,GAAgBlE,MAAO,CAAE0G,SAAU,QAAvD,SACG7K,EAAE,gCAMbiL,QAAS,QACTC,oBAAqB,oBACrBC,iBAAkB7F,GAAY,OAC9B8F,aAAc9F,GAAY,CAAE+F,UAAW,MAAO7B,YAAa,QAC3D8B,YACE,qCACE,cAACrF,EAAA,EAAD,CACEtC,MAAO3D,EAAE,OACTyD,MAAOS,WAAU,OAACiE,QAAD,IAACA,OAAD,EAACA,EAAMoD,KAAO,IAAxB,+BAAqDpD,QAArD,IAAqDA,OAArD,EAAqDA,EAAMoD,IAA3D,KACPxJ,MAAOuD,EAAW,GAAK,IACvBe,GAAI,GACJmF,QAASxL,EACP,iHAEFyL,iBAAiB,aACjBC,iBAAiB,sBAEnB,cAACzF,EAAA,EAAD,CACEtC,MAAO3D,EAAE,OACTyD,MAAK,UAAS,OAAJ0E,QAAI,IAAJA,KAAMwD,IAAN,OAAYxD,QAAZ,IAAYA,OAAZ,EAAYA,EAAMwD,IAAI9G,QAAQ,GAAK,EAAxC,KACLqB,OAAM,UAAKhC,WAAU,OAACiE,QAAD,IAACA,OAAD,EAACA,EAAMyD,OAAO/G,QAAQ,GAArC,KACNgH,WACE,sBAAM1H,MAAO,CAAEqF,YAAa,OAA5B,SACE,cAAC,KAAD,CAAKsC,KAAK,OAAO/J,MAAO,GAAId,MAAM,WAGtC8K,UACE,sBAAM5H,MAAO,CAAEqF,YAAa,OAA5B,SACE,cAAC,KAAD,CAAKsC,KAAK,eAAe/J,MAAO,GAAId,MAAM,WAG9Cc,MAAOuD,EAAW,IAAM,IACxBkG,QAASxL,EACP,sPAEFyL,iBAAkBrD,IAAMtJ,EAAMoC,OAAS,GAAW,IAANkH,EAAU,UAAY,aAClEsD,iBAAkBtD,IAAMtJ,EAAMoC,OAAS,GAAW,IAANkH,EAAU,qBAAuB,oBAC7E4D,cACE,cAACC,EAAA,EAAD,CACEC,MAAK,iBAAK/D,QAAL,IAAKA,GAAL,UAAKA,EAAM0B,mBAAX,iBAAK,EAAmBD,cAAxB,aAAK,EAA2B7F,OAAhC,mBAA0CoE,QAA1C,IAA0CA,GAA1C,UAA0CA,EAAM0B,mBAAhD,iBAA0C,EAAmBE,cAA7D,aAA0C,EAA2BhG,QAC1EoI,gBAAgB,SAChBC,iBAAkBjE,EAAKU,kBACvB8C,IAAG,OAAExD,QAAF,IAAEA,OAAF,EAAEA,EAAMwD,IACXC,MAAO1H,WAAU,OAACiE,QAAD,IAACA,OAAD,EAACA,EAAMyD,OACxBL,IAAKrH,WAAU,OAACiE,QAAD,IAACA,OAAD,EAACA,EAAMoD,KACtBc,UAAWlE,EAAKG,kBAChBgE,MAAI,EACJC,aAAY,OAAEpE,QAAF,IAAEA,GAAF,UAAEA,EAAM0B,mBAAR,iBAAE,EAAmBD,cAArB,aAAE,EAA2B4C,QAAQjO,GACjDkO,kBACwC,WAAlC,OAAJtE,QAAI,IAAJA,GAAA,UAAAA,EAAM0B,mBAAN,mBAAmBE,cAAnB,eAA2BhG,QAAqB,MAAhD,OAAwDoE,QAAxD,IAAwDA,GAAxD,UAAwDA,EAAM0B,mBAA9D,iBAAwD,EAAmBE,cAA3E,aAAwD,EAA2ByC,QAAQjO,GAE7FmO,QAASvE,EAAKc,oBAIpB,cAAChD,EAAA,EAAD,CACEtC,MAAO3D,EAAE,aACTyD,MAAK,WAAMkJ,OAAM,OAACxE,QAAD,IAACA,OAAD,EAACA,EAAMyE,aAAaC,oBAAeC,IACpD/K,MAAOuD,EAAW,IAAM,IACxBkG,QAASxL,EAAE,mEACXyL,iBAAkBnG,EAAW,cAAgB,aAC7CoG,iBAAkBpG,EAAW,qBAAuB,uBAEtD,cAACW,EAAA,EAAD,CACEtC,MAAO3D,EAAE,UACTyD,MAAK,UAAKgF,IACVsD,UACE,cAAC5E,GAAD,UACE,cAAC4F,GAAA,EAAD,CAAqBnD,OAAM,OAAEzB,QAAF,IAAEA,OAAF,EAAEA,EAAM8B,aAAaF,OAAOhG,OAAQxD,KAAM,OAGzE2F,QAA4B,KAAhB,OAAJiC,QAAI,IAAJA,OAAA,EAAAA,EAAMgC,WAAN,UAA+BxB,IAAyB,GAChEkD,YACsB,KAAhB,OAAJ1D,QAAI,IAAJA,OAAA,EAAAA,EAAMgC,WACJ,cAAChD,GAAD,UACE,cAAC4F,GAAA,EAAD,CACEnD,OAAqB,KAAbzB,EAAK5G,IAAa,QAAlB,OAA4B4G,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAM8B,aAAaL,OAAO7F,OAC9DxD,KAAM,OAGR,KAENwB,MAAOuD,EAAW,GAAK,SAI7B0H,gBACE,qCACE,eAACzN,EAAD,WACG+F,GACC,cAACW,EAAA,EAAD,CACEtC,MAAO3D,EAAE,gBACTyD,MAAOsF,GACP7C,OAAQgD,GACR/C,iBAAe,EACfpE,MAAO,IACPC,OAAQ,GACRoE,WAAY,GACZC,GAAI,KAGR,cAACU,GAAD,CACEtG,QAAS,2BA7LEwM,EAAOC,EA6LT,OA7LED,EA8LI,OACX9E,QADW,IACXA,GADW,UACXA,EAAM0B,mBADK,iBACX,EAAmBD,cADR,aACX,EAA2B4C,QAAQjO,GA/LrB2O,EAgMwB,WAAlC,OAAJ/E,QAAI,IAAJA,GAAA,UAAAA,EAAM0B,mBAAN,mBAAmBE,cAAnB,eAA2BhG,QAAqB,MAAhD,OAAwDoE,QAAxD,IAAwDA,GAAxD,UAAwDA,EAAM0B,mBAA9D,iBAAwD,EAAmBE,cAA3E,aAAwD,EAA2ByC,QAAQjO,GA/LzGF,EACE8O,aAAe,CACbC,MAAOC,KAAMC,MACbC,WAAYN,KAGhB5O,EACE8O,aAAe,CACbC,MAAOC,KAAMG,OACbD,WAAYL,UAGhBlF,KA+KQ,SAQGhI,EAAE,aAEHsF,GACA,cAACW,EAAA,EAAD,CACEtC,MAAO3D,EAAE,gBACTyD,MAAOsF,GACP7C,OAAQgD,GACR/C,iBAAe,EACfpE,MAAO,IACPC,OAAQ,GACRoE,WAAY,GACZC,GAAI,SAIRf,GAAY,cAAC0B,GAAD,IACd,cAAC,GAAD,CACEN,UAAS,OAAE6B,SAAF,IAAEA,QAAF,EAAEA,GAAekF,WAC1BjJ,cAAa,OAAE2D,QAAF,IAAEA,GAAF,UAAEA,EAAMK,gBAAR,iBAAE,EAAgBhE,qBAAlB,aAAE,EAA+BiJ,WAC9ClJ,oBAAmB,OAAE4D,QAAF,IAAEA,GAAF,WAAEA,EAAMK,gBAAR,mBAAE,GAAgBQ,oBAAlB,cAAE,GAA8ByE,WACnD9G,eAAc,OAAEwB,QAAF,IAAEA,OAAF,EAAEA,EAAMG,kBACtB7D,WAAYA,GACZlD,IAAK4G,EAAK5G,OAEV+D,GAAY,cAAC0B,GAAD,IACd,cAAC,GAAD,CAAezF,IAAK4G,EAAK5G,IAAKxB,SAAmC,SAAzB0I,GAAiCjB,gBAAiBA,YAMlG,OACE,cAACN,GAAD,UACE,cAACwG,EAAA,EAAD,CAAUC,UAAW1F,OAKZ9G,OAAMC,KAAKsG,I,WCpQlBkG,GAAWC,OAAOC,SAAlBF,OACFG,GAAS,IAAIC,gBAAgBJ,IAE7BK,GAAkBC,SAASH,GAAOI,IAAI,QA+L7BC,GA7La,YX8CG,WAC7BC,cACAC,cACA,IAAMjQ,EAAWC,cAEI,IADPL,EAAa,MACjBiD,QACR7C,EAASkQ,eWnDXC,GXX8B,WAC9B,IAAQjQ,EAAYC,cAAZD,QACFF,EAAWC,cACTmQ,EAAgBC,cAAhBD,YAEFE,EAAcC,cAAqBnB,WACnCoB,EAAaC,cAEnBrQ,qBAAU,WAEFF,IAAYG,IAAQC,OACtBN,EAAS0Q,YAA8BxQ,EAASkQ,EAAa,IAAIpL,IAAUsL,GAAcE,MAI5F,CAACxQ,EAAUE,EAASkQ,EAAaE,EAAaE,IWHjDG,GACA,MAA6BxQ,cAArBN,EAAR,EAAQA,QAASK,EAAjB,EAAiBA,QACjB0Q,YAAmB1Q,GACnB,IAAQ2Q,EAAaC,YAAY5Q,GAAzB2Q,SACAE,EAAkBC,YAAiB9Q,GAAnC6Q,cAEApP,EAAMC,cAAND,EACAsP,EAAaC,cAAbD,SACR,EAA0CpP,oBAAS,GAAnD,mBAAOsP,EAAP,KAAsBC,EAAtB,KACMC,EAAUzR,EAAaC,GAC7B,EAA0BgC,mBAAS,IAAnC,mBAAOyP,EAAP,KAAcC,EAAd,KACA,EAAoC1P,mBAAS,OAA7C,mBAAO2P,EAAP,KAAmBC,EAAnB,KAEA,EAAoC5P,oBAAS,GAA7C,mBAAO6P,EAAP,KAAmBC,EAAnB,KACMC,GAAYX,EAASY,SAAS,WAE9BC,EAAcT,EAAQU,QAAO,SAACjI,GAAD,MAA8B,OAApBA,EAAK6C,cAC5CqF,EAAgBX,EAAQU,QAAO,SAACjI,GAAD,MAA8B,OAApBA,EAAK6C,cAE9CsF,EAAkBH,EAAYC,QAClC,SAACjI,GAAD,OAAUA,EAAKK,UAAY,IAAInF,IAAU8E,EAAKK,SAAShE,eAAe+L,cAAc,MAOhFC,EAA0BH,EAAcD,QAC5C,SAACjI,GAAD,OAAUA,EAAKK,UAAY,IAAInF,IAAU8E,EAAKK,SAAShE,eAAe+L,cAAc,MAGhFE,EAAiB,sBAAIN,GAAJ,YAAoBE,IACxCD,QACC,SAACjI,GAAD,OACEA,EAAKK,UACL,IAAInF,IAAU8E,EAAKK,SAASE,kBACzBgI,KAAK,IAAIrN,IAAU8E,EAAKK,SAASI,mBACjC2H,cAAc,MAEpBrI,KAAI,SAACyI,GACJ,OAAOA,EAAapP,OAGxB,EAAwDrB,mBAAS0Q,MAAjE,mBAAOC,GAAP,KAA6BC,GAA7B,KACMC,GAAcC,iBAAuB,MAE3CvS,qBAAU,WAQH+Q,IACsB,IAAIyB,sBART,SAACC,GACrB,YAAgBA,EAAhB,MACUC,gBACRL,IAAwB,SAACM,GAAD,OAA2BA,EAAwBR,UAKZ,CAC/DS,WAAY,MACZC,UAAW,IAEIC,QAAQR,GAAYS,SACrC/B,GAAiB,MAElB,CAACD,IAyFJ,OACE,qCACE,cAAC,IAAD,CACE9E,cAAc,SACdE,eAAe,SACf6G,GAAG,QACHtN,MAAO,CAAEuN,SAAU,WAAYC,IAAK,OAAQ5P,MAAO,QAJrD,SAME,eAAC6P,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,OAAO,gBACPC,KAAK,8EACLpO,MAAO3D,EAAE,iBACTgS,eAAa,EACbC,SAAU,OAEZ,cAAC,IAAD,CAAMtH,WAAW,SAASC,eAAe,SAASnB,GAAG,OAArD,SACE,cAACyI,EAAA,EAAD,CACEC,oBAlJc,SAACC,GACzBxC,EAASwC,EAAMC,OAAO5O,QAkJZ6O,gBAAiBxC,EACjByC,WAAYvC,EACZwC,WAAY,cAAC,EAAD,CAAkB1S,KAAM2Q,EAAgB1Q,SAAoC,IAA1B0Q,EAAevP,SAC7E6O,WAAYA,EACZJ,MAAOA,EACP8C,aAAc5C,EACd6C,iBAAe,MAGnB,cAAC,GAAD,CAAc5T,MAnHF,WAClB,IAAIA,EAAQmR,EAAWE,EAAcE,EAEjCpC,UAIOnB,KAFI,OAAXqD,QAAW,IAAXA,OAAA,EAAAA,EAAa/G,MAAK,SAACjB,GACjB,OAAOA,EAAK5G,MAAQ0M,SAGtBnP,EAAK,QACHqR,QADG,IACHA,OADG,EACHA,EAAa/G,MAAK,SAACjB,GACjB,OAAOA,EAAK5G,MAAQ0M,OAFnB,0BAIAkC,QAJA,IAIAA,OAJA,EAIAA,EAAaC,QAAO,SAACjI,GACtB,OAAOA,EAAK5G,MAAQ0M,UAkB5B,OAZI0B,IACF7Q,EAAQA,EAAMsR,QAAO,SAACjI,GAAU,IAAD,QAC7B,MAAO,iBAAGA,QAAH,IAAGA,GAAH,UAAGA,EAAM0B,mBAAT,iBAAG,EAAmBE,cAAtB,aAAG,EAA2BhG,OAA9B,mBAAwCoE,QAAxC,IAAwCA,GAAxC,UAAwCA,EAAM0B,mBAA9C,iBAAwC,EAAmBD,cAA3D,aAAwC,EAA2B7F,QACvE4O,cACAzC,SAASP,EAAMgD,mBAIlB5C,IACFjR,EAAQmR,EAAWK,EAAkBE,GAG/BX,GACN,IAAK,MACH,OAAOT,EACHwD,kBACE9T,GACA,SAACqJ,GAAD,uBAAoBiH,EAAchG,MAAK,SAACyJ,GAAD,OAAcA,EAAStR,MAAQ4G,EAAK5G,cAA3E,aAAoB,EAA6DuR,QACjF,OACAC,MAAM,EAAGlC,IACX/R,EAAMiU,MAAM,EAAGlC,IACrB,IAAK,UACH,OAAO/R,EACJsR,QACC,SAACjI,GAAD,OACE6K,KAAQ9C,SAAS/H,EAAK0B,YAAYE,OAAOhG,SAAWiP,KAAQ9C,SAAS/H,EAAK0B,YAAYD,OAAO7F,WAEhGgP,MAAM,EAAGlC,IACd,IAAK,MACH,OAAO+B,kBAAQ9T,GAAO,SAACqJ,GAAD,OAAUjE,WAAWiE,EAAKoD,OAAM,QAAQwH,MAAM,EAAGlC,IACzE,IAAK,MACH,OAAO3B,EACH0D,kBACE9T,GACA,SAACqJ,GAAD,cAAoB+G,QAApB,IAAoBA,OAApB,EAAoBA,EAAU9F,MAAK,SAACC,GAAD,OAASA,EAAI9H,MAAQ4G,EAAK5G,KAAkC,QAA3B8H,EAAIhH,KAAK4Q,mBAC7E,OACAF,MAAM,EAAGlC,IACX/R,EAAMiU,MAAM,EAAGlC,IACrB,IAAK,MACH,OAAO3B,EACH0D,kBACE9T,GACA,SAACqJ,GAAD,cAAoB+G,QAApB,IAAoBA,OAApB,EAAoBA,EAAU9F,MAAK,SAACC,GAAD,OAASA,EAAI9H,MAAQ4G,EAAK5G,KAAkC,QAA3B8H,EAAIhH,KAAK4Q,mBAC7E,OACAF,MAAM,EAAGlC,IACX/R,EAAMiU,MAAM,EAAGlC,IACrB,IAAK,YACH,OAAO/R,EACJsR,QACC,SAACjI,GAAD,OACE+K,KAAWhD,SAAS/H,EAAK0B,YAAYE,OAAOhG,SAC5CmP,KAAWhD,SAAS/H,EAAK0B,YAAYD,OAAO7F,WAE/CgP,MAAM,EAAGlC,IACd,IAAK,YACH,OAAO+B,kBAAQ9T,GAAO,SAACqJ,GAAD,OAAoBjE,WAAWiE,EAAKyE,eAAc,QAAQmG,MAAM,EAAGlC,IAC3F,QACE,OAAOzB,EACHwD,kBACE9T,GACA,SAACqJ,GAAD,uBAAoBiH,EAAchG,MAAK,SAACyJ,GAAD,OAAcA,EAAStR,MAAQ4G,EAAK5G,cAA3E,aAAoB,EAA6DuR,QACjF,OACAC,MAAM,EAAGlC,IACX/R,EAAMiU,MAAM,EAAGlC,KAgCIsC,GAAexL,QAASsG,GAAiBrG,aAAcsH,SAGhF,qBAAKkE,IAAKrC","file":"static/js/47.99bc31e5.chunk.js","sourcesContent":["import { ChainId } from '@apeswapfinance/sdk'\nimport BigNumber from 'bignumber.js'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useRefresh from 'hooks/useRefresh'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useFarmLpAprs } from 'state/hooks'\nimport { useFetchLpTokenPrices } from 'state/lpPrices/hooks'\nimport { useFetchTokenPrices, usePriceBananaBusd, useTokenPrices } from 'state/tokenPrices/hooks'\nimport { DualFarm, State } from 'state/types'\nimport { fetchDualFarmsPublicDataAsync, fetchDualFarmUserDataAsync, setInitialDualFarmDataAsync } from '.'\n\nexport const usePollDualFarms = () => {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const { tokenPrices } = useTokenPrices()\n  // Made a string because hooks will refresh bignumbers\n  const bananaPrice = usePriceBananaBusd().toString()\n  const farmLpAprs = useFarmLpAprs()\n\n  useEffect(() => {\n    const fetchFarms = () => {\n      if (chainId === ChainId.MATIC) {\n        dispatch(fetchDualFarmsPublicDataAsync(chainId, tokenPrices, new BigNumber(bananaPrice), farmLpAprs))\n      }\n    }\n    fetchFarms()\n  }, [dispatch, chainId, tokenPrices, bananaPrice, farmLpAprs])\n}\n\nexport const useDualFarms = (account): DualFarm[] => {\n  const { slowRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  const { chainId } = useActiveWeb3React()\n  useEffect(() => {\n    if (account && (chainId === ChainId.MATIC || chainId === ChainId.MATIC_TESTNET)) {\n      dispatch(fetchDualFarmUserDataAsync(chainId, account))\n    }\n  }, [account, dispatch, slowRefresh, chainId])\n  const farms = useSelector((state: State) => state.dualFarms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): DualFarm => {\n  const farm = useSelector((state: State) => state.dualFarms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): DualFarm => {\n  const farm = useSelector((state: State) =>\n    state.dualFarms.data.find(\n      () => `${farm?.stakeTokens?.token0?.symbol}-${farm?.stakeTokens?.token1?.symbol}` === lpSymbol,\n    ),\n  )\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm?.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm?.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm?.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm?.userData ? new BigNumber(farm.userData.rewarderEarnings) : new BigNumber(0),\n  }\n}\n\nexport const useSetDualFarms = () => {\n  useFetchLpTokenPrices()\n  useFetchTokenPrices()\n  const dispatch = useAppDispatch()\n  const farms = useDualFarms(null)\n  if (farms.length === 0) {\n    dispatch(setInitialDualFarmDataAsync())\n  }\n}\n","import { Button, Flex } from '@apeswapfinance/uikit'\nimport styled from 'styled-components'\n\nexport const StyledButton = styled(Button)`\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 700;\n  padding: 10px 20px;\n  min-width: 227px;\n  height: 44px;\n`\n\nexport const SmallButton = styled(Button)`\n  max-width: 44px;\n  height: 44px;\n`\n\nexport const ActionContainer = styled(Flex)`\n  width: 100%;\n  justify-content: space-between;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: auto;\n  }\n`\n\nexport const CenterContainer = styled(Flex)`\n  width: 100%;\n  justify-content: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: auto;\n    justify-content: auto;\n  }\n`\n","import React, { useState } from 'react'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport { AutoRenewIcon, Button } from '@apeswapfinance/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { ActionContainer } from './styles'\n\ninterface HarvestActionsProps {\n  pids: number[]\n  disabled: boolean\n}\n\nconst HarvestAllAction: React.FC<HarvestActionsProps> = ({ pids, disabled }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onReward } = useAllHarvest(pids, chainId)\n\n  return (\n    <ActionContainer>\n      <Button\n        size=\"mds\"\n        className=\"noClick\"\n        disabled={disabled || pendingTrx}\n        onClick={async () => {\n          setPendingTrx(true)\n          await onReward().catch((e) => {\n            console.error(e)\n            setPendingTrx(false)\n          })\n          setPendingTrx(false)\n        }}\n        endIcon={pendingTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n      >\n        {t('HARVEST ALL')} ({pids.length})\n      </Button>\n    </ActionContainer>\n  )\n}\n\nexport default React.memo(HarvestAllAction)\n","import React, { useState } from 'react'\nimport { Skeleton, AutoRenewIcon } from '@apeswapfinance/uikit'\nimport { useDualFarmApprove } from 'hooks/useApprove'\nimport { useERC20 } from 'hooks/useContract'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useToast } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { StyledButton } from './styles'\n\ninterface ApprovalActionProps {\n  stakingTokenContractAddress: string\n  pid: number\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ stakingTokenContractAddress, pid, isLoading = false }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingTokenContractAddress)\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onApprove } = useDualFarmApprove(stakingTokenContract, pid)\n  const { toastSuccess } = useToast()\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <StyledButton\n          className=\"noClick\"\n          disabled={pendingTrx}\n          onClick={async () => {\n            setPendingTrx(true)\n            await onApprove()\n              .then((resp) => {\n                const trxHash = resp !== false ? resp.transactionHash : ''\n                toastSuccess(t('Approve Successful'), {\n                  text: t('View Transaction'),\n                  url: getEtherscanLink(trxHash, 'transaction', chainId),\n                })\n              })\n              .catch((e) => {\n                console.error(e)\n                setPendingTrx(false)\n              })\n            setPendingTrx(false)\n          }}\n          endIcon={pendingTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n        >\n          {t('ENABLE')}\n        </StyledButton>\n      )}\n    </>\n  )\n}\n\nexport default React.memo(ApprovalAction)\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon, ModalFooter } from '@apeswapfinance/uikit'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(new BigNumber(max))\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalFooter onDismiss={onDismiss}>\n        <Button\n          fullWidth\n          disabled={pendingTx || fullBalance === '0' || val === '0' || parseFloat(fullBalance) < parseFloat(val)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              console.error('Transaction Failed')\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          endIcon={pendingTx && <AutoRenewIcon spin color=\"currentColor\" />}\n          style={{\n            borderRadius: '10px',\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default React.memo(DepositModal)\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, AutoRenewIcon, ModalFooter } from '@apeswapfinance/uikit'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(new BigNumber(max))\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalFooter onDismiss={onDismiss}>\n        <Button\n          disabled={pendingTx || parseFloat(fullBalance) < parseFloat(val)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              console.error('Transaction Failed')\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          fullWidth\n          endIcon={pendingTx && <AutoRenewIcon spin color=\"currentColor\" />}\n          style={{\n            borderRadius: '10px',\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default React.memo(WithdrawModal)\n","import React, { useState } from 'react'\nimport {\n  Flex,\n  AddIcon,\n  MinusIcon,\n  useModal,\n  AutoRenewIcon,\n  LinkExternal,\n  Text,\n  useMatchBreakpoints,\n} from '@apeswapfinance/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useDualFarmStake } from 'hooks/useStake'\nimport { useMiniChefUnstake } from 'hooks/useUnstake'\nimport { useToast } from 'state/hooks'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ListViewContent from 'components/ListViewContent'\nimport { useTranslation } from 'contexts/Localization'\nimport DepositModal from '../Modals/DepositModal'\nimport WithdrawModal from '../Modals/WithdrawModal'\nimport { ActionContainer, CenterContainer, SmallButton, StyledButton } from './styles'\n\ninterface StakeActionsProps {\n  stakingTokenBalance: string\n  stakedBalance: string\n  lpValueUsd: number\n  pid: number\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({ stakingTokenBalance, stakedBalance, lpValueUsd, pid }) => {\n  const rawStakedBalance = getBalanceNumber(new BigNumber(stakedBalance))\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const userStakedBalanceUsd = `$${(\n    getBalanceNumber(new BigNumber(stakedBalance) || new BigNumber(0)) * lpValueUsd\n  ).toFixed(2)}`\n  const [pendingDepositTrx, setPendingDepositTrx] = useState(false)\n  const [pendingWithdrawTrx, setPendingWithdrawTrx] = useState(false)\n  const { toastSuccess } = useToast()\n  const { isXl, isLg, isXxl } = useMatchBreakpoints()\n  const isMobile = !isLg && !isXl && !isXxl\n  const firstStake = !new BigNumber(stakedBalance)?.gt(0)\n\n  const { onStake } = useDualFarmStake(pid)\n  const { onUnstake } = useMiniChefUnstake(pid)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingTokenBalance}\n      onConfirm={async (val) => {\n        setPendingDepositTrx(true)\n        await onStake(val)\n          .then((resp) => {\n            const trxHash = resp.transactionHash\n            toastSuccess(t('Deposit Successful'), {\n              text: t('View Transaction'),\n              url: getEtherscanLink(trxHash, 'transaction', chainId),\n            })\n          })\n          .catch((e) => {\n            console.error(e)\n            setPendingDepositTrx(false)\n          })\n        setPendingDepositTrx(false)\n      }}\n    />,\n  )\n\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={async (val) => {\n        setPendingWithdrawTrx(true)\n        await onUnstake(val)\n          .then((resp) => {\n            const trxHash = resp.transactionHash\n            toastSuccess(\n              t('Withdraw Successful'),\n              <LinkExternal href={getEtherscanLink(trxHash, 'transaction', chainId)}>\n                <Text> {t('View Transaction')} </Text>\n              </LinkExternal>,\n            )\n          })\n          .catch((e) => {\n            console.error(e)\n            setPendingWithdrawTrx(false)\n          })\n        setPendingWithdrawTrx(false)\n      }}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    if (firstStake) {\n      return (\n        <CenterContainer>\n          <StyledButton\n            onClick={onPresentDeposit}\n            endIcon={pendingDepositTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n            disabled={pendingDepositTrx}\n          >\n            {t('DEPOSIT')}\n          </StyledButton>\n        </CenterContainer>\n      )\n    }\n    return (\n      <ActionContainer>\n        {isMobile && (\n          <ListViewContent\n            title={t('Staked LP')}\n            value={`${rawStakedBalance.toFixed(6)} LP`}\n            value2={userStakedBalanceUsd}\n            value2Secondary\n            width={100}\n            height={50}\n            lineHeight={15}\n            ml={10}\n          />\n        )}\n        <Flex>\n          <SmallButton\n            onClick={onPresentWithdraw}\n            endIcon={pendingWithdrawTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n            disabled={pendingWithdrawTrx}\n            mr=\"6px\"\n          >\n            <MinusIcon color=\"white\" width=\"16px\" height=\"20px\" fontWeight={700} />\n          </SmallButton>\n          <SmallButton\n            onClick={onPresentDeposit}\n            endIcon={pendingDepositTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n            disabled={pendingDepositTrx || !new BigNumber(stakingTokenBalance)?.gt(0)}\n          >\n            <AddIcon color=\"white\" width=\"20px\" height=\"20px\" fontWeight={700} />\n          </SmallButton>\n        </Flex>\n        {!isMobile && (\n          <ListViewContent\n            title={t('Staked LP')}\n            value={`${rawStakedBalance.toFixed(6)} LP`}\n            value2={userStakedBalanceUsd}\n            value2Secondary\n            width={100}\n            height={50}\n            lineHeight={15}\n            ml={10}\n          />\n        )}\n      </ActionContainer>\n    )\n  }\n\n  return renderStakingButtons()\n}\n\nexport default React.memo(StakeAction)\n","import React from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport BigNumber from 'bignumber.js'\nimport { CenterContainer } from './styles'\nimport ApprovalAction from './ApprovalAction'\nimport StakeAction from './StakeActions'\nimport UnlockButton from '../../../../components/UnlockButton'\n\n// Changed props to type string because BigNumbers cause re-renders\n\ninterface CardActionProps {\n  allowance: string\n  stakingTokenBalance: string\n  stakedBalance: string\n  lpValueUsd: number\n  stakeLpAddress: string\n  pid: number\n}\n\nconst CardActions: React.FC<CardActionProps> = ({\n  allowance,\n  stakingTokenBalance,\n  stakedBalance,\n  lpValueUsd,\n  stakeLpAddress,\n  pid,\n}) => {\n  const { account } = useActiveWeb3React()\n  const actionToRender = () => {\n    if (!account) {\n      return (\n        <CenterContainer>\n          <UnlockButton table />\n        </CenterContainer>\n      )\n    }\n    if (!new BigNumber(allowance)?.gt(0)) {\n      return (\n        <CenterContainer>\n          <ApprovalAction stakingTokenContractAddress={stakeLpAddress} pid={pid} />\n        </CenterContainer>\n      )\n    }\n    return (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        stakingTokenBalance={stakingTokenBalance}\n        lpValueUsd={lpValueUsd}\n        pid={pid}\n      />\n    )\n  }\n  return actionToRender()\n}\n\nexport default React.memo(CardActions)\n","import styled from 'styled-components'\nimport { Tag } from '@ape.swap/uikit'\nimport { Button, ArrowDropUpIcon, Flex } from '@apeswapfinance/uikit'\n\nexport const FarmButton = styled(Button)`\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 700;\n  padding: 10px 20px;\n  min-width: 129px;\n  height: 44px;\n`\n\nexport const NextArrow = styled(ArrowDropUpIcon)`\n  transform: rotate(90deg);\n`\n\nexport const Container = styled(Flex)`\n  flex-direction: row;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  margin-top: 20px;\n`\n\nexport const ServiceTokenDisplayContainer = styled.div`\n  margin-left: -2px;\n  margin-right: 5px;\n`\n\nexport const StyledTag = styled(Tag)`\n  font-size: 10px;\n  padding: 0px 6px !important;\n  font-weight: 700;\n  border: none;\n  border-radius: 10px;\n  height: auto;\n  width: max-content;\n`\n","import React, { useState } from 'react'\nimport { useMiniChefHarvest } from 'hooks/useHarvest'\nimport { AutoRenewIcon, useMatchBreakpoints } from '@apeswapfinance/uikit'\nimport { useToast } from 'state/hooks'\nimport { getEtherscanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ListViewContent from 'components/ListViewContent'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmButton } from '../styles'\nimport { ActionContainer } from './styles'\n\ninterface HarvestActionsProps {\n  pid: number\n  userEarningsUsd: string\n  disabled: boolean\n}\n\nconst HarvestAction: React.FC<HarvestActionsProps> = ({ pid, disabled, userEarningsUsd }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const [pendingTrx, setPendingTrx] = useState(false)\n  const { onReward } = useMiniChefHarvest(pid)\n  const { toastSuccess } = useToast()\n  const { isXl, isLg, isXxl } = useMatchBreakpoints()\n  const isMobile = !isLg && !isXl && !isXxl\n\n  return (\n    <ActionContainer>\n      {isMobile && <ListViewContent title={t('Earned')} value={userEarningsUsd} width={100} height={50} ml={10} />}\n      <FarmButton\n        className=\"noClick\"\n        disabled={disabled || pendingTrx}\n        onClick={async () => {\n          setPendingTrx(true)\n          await onReward()\n            .then((resp) => {\n              const trxHash = resp.transactionHash\n              toastSuccess(t('Harvest Successful'), {\n                text: t('View Transaction'),\n                url: getEtherscanLink(trxHash, 'transaction', chainId),\n              })\n            })\n            .catch((e) => {\n              console.error(e)\n              setPendingTrx(false)\n            })\n          setPendingTrx(false)\n        }}\n        endIcon={pendingTrx && <AutoRenewIcon spin color=\"currentColor\" />}\n      >\n        {t('HARVEST')}\n      </FarmButton>\n      {!isMobile && <ListViewContent title={t('Earned')} value={userEarningsUsd} width={100} height={50} ml={10} />}\n    </ActionContainer>\n  )\n}\n\nexport default React.memo(HarvestAction)\n","import React from 'react'\nimport { Flex, Text, LinkExternal, Svg, useModal } from '@apeswapfinance/uikit'\nimport { TagVariants } from '@ape.swap/uikit'\nimport { Box } from 'theme-ui'\nimport ListView from 'components/ListView'\nimport { ExtendedListViewProps } from 'components/ListView/types'\nimport ListViewContent from 'components/ListViewContent'\nimport { DualFarm, Tag } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport CalcButton from 'components/RoiCalculator/CalcButton'\nimport CardActions from './CardActions'\nimport { Container, FarmButton, NextArrow, ServiceTokenDisplayContainer, StyledTag } from './styles'\nimport HarvestAction from './CardActions/HarvestAction'\nimport { ActionContainer } from './CardActions/styles'\nimport useIsMobile from '../../../hooks/useIsMobile'\nimport ServiceTokenDisplay from '../../../components/ServiceTokenDisplay'\nimport { LiquidityModal } from 'components/LiquidityWidget'\nimport { Field, selectCurrency } from 'state/swap/actions'\nimport { useAppDispatch } from 'state'\n\nconst DisplayFarms: React.FC<{ farms: DualFarm[]; openPid?: number; dualFarmTags: Tag[] }> = ({\n  farms,\n  openPid,\n  dualFarmTags,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const isMobile = useIsMobile()\n  const dispatch = useAppDispatch()\n\n  // TODO: clean up this code\n  // Hack to get the close modal function from the provider\n  // Need to export ModalContext from uikit to clean up the code\n  const [, closeModal] = useModal(<></>)\n  const [onPresentAddLiquidityWidgetModal] = useModal(\n    <LiquidityModal handleClose={closeModal} />,\n    true,\n    true,\n    'liquidityWidgetModal',\n  )\n\n  const showLiquidity = (token, quoteToken) => {\n    dispatch(\n      selectCurrency({\n        field: Field.INPUT,\n        currencyId: token,\n      }),\n    )\n    dispatch(\n      selectCurrency({\n        field: Field.OUTPUT,\n        currencyId: quoteToken,\n      }),\n    )\n    onPresentAddLiquidityWidgetModal()\n  }\n\n  const farmsListView = farms.map((farm, i) => {\n    const polygonScanUrl = `https://polygonscan.com/address/${farm.stakeTokenAddress}`\n    const userAllowance = farm?.userData?.allowance\n    const userEarningsMiniChef = getBalanceNumber(farm?.userData?.miniChefEarnings || new BigNumber(0)).toFixed(2)\n    const userEarningsRewarder = getBalanceNumber(farm?.userData?.rewarderEarnings || new BigNumber(0)).toFixed(2)\n    const userEarningsUsd = `$${(\n      getBalanceNumber(farm?.userData?.miniChefEarnings || new BigNumber(0)) * farm?.rewardToken0Price +\n      getBalanceNumber(farm?.userData?.rewarderEarnings || new BigNumber(0)) * farm?.rewardToken1Price\n    ).toFixed(2)}`\n    const userTokenBalance = `${getBalanceNumber(farm?.userData?.tokenBalance || new BigNumber(0))?.toFixed(6)} LP`\n\n    const lpValueUsd = farm?.stakeTokenPrice\n\n    const userTokenBalanceUsd = `$${(\n      getBalanceNumber(farm?.userData?.tokenBalance || new BigNumber(0)) * lpValueUsd\n    ).toFixed(2)}`\n\n    const fTag = dualFarmTags?.find((tag) => tag.pid === farm.pid)\n    const tagColor = fTag?.color as TagVariants\n\n    // Changing tooltip placement conditionaly until zindex solution\n    return {\n      tag: (\n        <>\n          {fTag?.pid === farm.pid && (\n            <Box sx={{ marginRight: '5px', mt: '1px' }}>\n              <StyledTag key={fTag?.pid} variant={tagColor}>\n                {fTag?.text}\n              </StyledTag>\n            </Box>\n          )}\n        </>\n      ),\n      tokens: {\n        token1: farm.pid === 11 ? 'NFTY2' : farm?.stakeTokens?.token1?.symbol,\n        token2: farm?.stakeTokens?.token0?.symbol,\n        token3: farm?.rewardTokens?.token0?.symbol,\n        token4: farm?.dualImage !== false ? (farm.pid === 11 ? 'NFTY2' : farm?.rewardTokens?.token1?.symbol) : null,\n      },\n      stakeLp: true,\n      title: (\n        <Text ml={fTag?.pid === farm?.pid ? 0 : 10} bold>\n          {farm?.stakeTokens?.token1?.symbol}-{farm?.stakeTokens?.token0?.symbol}\n        </Text>\n      ),\n      viewType: 'stakeLP',\n      open: farm.pid === openPid,\n      id: farm.pid,\n      infoContent: (\n        <>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"space-between\" justifyContent=\"space-between\" style={{ width: '100%' }}>\n              <Text style={{ fontSize: '12px' }}>Multiplier</Text>\n              <Text bold style={{ fontSize: '12px' }}>\n                {Math.round(parseFloat(farm.multiplier) * 1000) / 100}X\n              </Text>\n            </Flex>\n            <Flex alignItems=\"space-between\" justifyContent=\"space-between\" style={{ width: '100%' }}>\n              <Text style={{ fontSize: '12px' }}>Stake</Text>\n              <Text bold style={{ fontSize: '12px' }}>\n                {farm?.stakeTokens?.token1?.symbol}-{farm?.stakeTokens?.token0?.symbol} LP\n              </Text>\n            </Flex>\n            <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"15px\">\n              <LinkExternal href={polygonScanUrl} style={{ fontSize: '14px' }}>\n                {t('View on PolygonScan')}\n              </LinkExternal>\n            </Flex>\n          </Flex>\n        </>\n      ),\n      ttWidth: '250px',\n      infoContentPosition: 'translate(8%, 0%)',\n      toolTipIconWidth: isMobile && '20px',\n      toolTipStyle: isMobile && { marginTop: '5px', marginRight: '10px' },\n      cardContent: (\n        <>\n          <ListViewContent\n            title={t('APY')}\n            value={parseFloat(farm?.apy) > 1000000 ? `>1,000,000%` : `${farm?.apy}%`}\n            width={isMobile ? 90 : 150}\n            ml={20}\n            toolTip={t(\n              'APY includes annualized BANANA rewards and rewards for providing liquidity (DEX swap fees), compounded daily.',\n            )}\n            toolTipPlacement=\"bottomLeft\"\n            toolTipTransform=\"translate(8%, 0%)\"\n          />\n          <ListViewContent\n            title={t('APR')}\n            value={`${farm?.apr ? farm?.apr.toFixed(2) : 0}%`}\n            value2={`${parseFloat(farm?.lpApr).toFixed(2)}%`}\n            value2Icon={\n              <span style={{ marginRight: '7px' }}>\n                <Svg icon=\"swap\" width={13} color=\"text\" />\n              </span>\n            }\n            valueIcon={\n              <span style={{ marginRight: '5px' }}>\n                <Svg icon=\"banana_token\" width={15} color=\"text\" />\n              </span>\n            }\n            width={isMobile ? 100 : 180}\n            toolTip={t(\n              'BANANA reward APRs are calculated in real time. DEX swap fee APRs are calculated based on previous 24 hours of trading volume. Note: APRs are provided for your convenience. APRs are constantly changing and do not represent guaranteed returns.',\n            )}\n            toolTipPlacement={i === farms.length - 1 && i !== 0 ? 'topLeft' : 'bottomLeft'}\n            toolTipTransform={i === farms.length - 1 && i !== 0 ? 'translate(-8%, 0%)' : 'translate(8%, 0%)'}\n            aprCalculator={\n              <CalcButton\n                label={`${farm?.stakeTokens?.token1?.symbol}-${farm?.stakeTokens?.token0?.symbol}`}\n                rewardTokenName=\"BANANA\"\n                rewardTokenPrice={farm.rewardToken0Price}\n                apr={farm?.apr}\n                lpApr={parseFloat(farm?.lpApr)}\n                apy={parseFloat(farm?.apy)}\n                lpAddress={farm.stakeTokenAddress}\n                isLp\n                tokenAddress={farm?.stakeTokens?.token1?.address[chainId]}\n                quoteTokenAddress={\n                  farm?.stakeTokens?.token0?.symbol === 'MATIC' ? 'ETH' : farm?.stakeTokens?.token0?.address[chainId]\n                }\n                lpPrice={farm.stakeTokenPrice}\n              />\n            }\n          />\n          <ListViewContent\n            title={t('Liquidity')}\n            value={`$${Number(farm?.totalStaked).toLocaleString(undefined)}`}\n            width={isMobile ? 100 : 180}\n            toolTip={t('The total value of the LP tokens currently staked in this farm.')}\n            toolTipPlacement={isMobile ? 'bottomRight' : 'bottomLeft'}\n            toolTipTransform={isMobile ? 'translate(13%, 0%)' : 'translate(23%, 0%)'}\n          />\n          <ListViewContent\n            title={t('Earned')}\n            value={`${userEarningsMiniChef}`}\n            valueIcon={\n              <ServiceTokenDisplayContainer>\n                <ServiceTokenDisplay token1={farm?.rewardTokens.token0.symbol} size={15} />\n              </ServiceTokenDisplayContainer>\n            }\n            value2={farm?.dualImage !== false ? `${userEarningsRewarder}` : ''}\n            value2Icon={\n              farm?.dualImage !== false ? (\n                <ServiceTokenDisplayContainer>\n                  <ServiceTokenDisplay\n                    token1={farm.pid === 11 ? 'NFTY2' : farm?.rewardTokens.token1.symbol}\n                    size={15}\n                  />\n                </ServiceTokenDisplayContainer>\n              ) : null\n            }\n            width={isMobile ? 65 : 120}\n          />\n        </>\n      ),\n      expandedContent: (\n        <>\n          <ActionContainer>\n            {isMobile && (\n              <ListViewContent\n                title={t('Available LP')}\n                value={userTokenBalance}\n                value2={userTokenBalanceUsd}\n                value2Secondary\n                width={100}\n                height={50}\n                lineHeight={15}\n                ml={10}\n              />\n            )}\n            <FarmButton\n              onClick={() =>\n                showLiquidity(\n                  farm?.stakeTokens?.token1?.address[chainId],\n                  farm?.stakeTokens?.token0?.symbol === 'MATIC' ? 'ETH' : farm?.stakeTokens?.token0?.address[chainId],\n                )\n              }\n            >\n              {t('GET LP')}\n            </FarmButton>\n            {!isMobile && (\n              <ListViewContent\n                title={t('Available LP')}\n                value={userTokenBalance}\n                value2={userTokenBalanceUsd}\n                value2Secondary\n                width={100}\n                height={50}\n                lineHeight={15}\n                ml={10}\n              />\n            )}\n          </ActionContainer>\n          {!isMobile && <NextArrow />}\n          <CardActions\n            allowance={userAllowance?.toString()}\n            stakedBalance={farm?.userData?.stakedBalance?.toString()}\n            stakingTokenBalance={farm?.userData?.tokenBalance?.toString()}\n            stakeLpAddress={farm?.stakeTokenAddress}\n            lpValueUsd={lpValueUsd}\n            pid={farm.pid}\n          />\n          {!isMobile && <NextArrow />}\n          <HarvestAction pid={farm.pid} disabled={userEarningsMiniChef === '0.00'} userEarningsUsd={userEarningsUsd} />\n        </>\n      ),\n    } as ExtendedListViewProps\n  })\n\n  return (\n    <Container>\n      <ListView listViews={farmsListView} />\n    </Container>\n  )\n}\n\nexport default React.memo(DisplayFarms)\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex } from '@apeswapfinance/uikit'\nimport { useFetchFarmLpAprs } from 'state/hooks'\nimport { useDualFarms, usePollDualFarms, useSetDualFarms } from 'state/dualFarms/hooks'\nimport { useFarmOrderings, useFarmTags } from 'state/farms/hooks'\nimport { DualFarm } from 'state/types'\nimport { orderBy } from 'lodash'\nimport ListViewLayout from 'components/layout/ListViewLayout'\nimport Banner from 'components/Banner'\nimport { useTranslation } from 'contexts/Localization'\nimport ListViewMenu from '../../components/ListViewMenu'\nimport HarvestAllAction from './components/CardActions/HarvestAllAction'\nimport DisplayFarms from './components/DisplayFarms'\nimport { BLUE_CHIPS, NUMBER_OF_FARMS_VISIBLE, STABLES } from '../Farms/constants'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\n\nconst { search } = window.location\nconst params = new URLSearchParams(search)\n\nconst urlSearchedFarm = parseInt(params.get('pid'))\n\nconst DualFarms: React.FC = () => {\n  useSetDualFarms()\n  usePollDualFarms()\n  const { account, chainId } = useActiveWeb3React()\n  useFetchFarmLpAprs(chainId)\n  const { farmTags } = useFarmTags(chainId)\n  const { farmOrderings } = useFarmOrderings(chainId)\n\n  const { t } = useTranslation()\n  const { pathname } = useLocation()\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const farmsLP = useDualFarms(account)\n  const [query, setQuery] = useState('')\n  const [sortOption, setSortOption] = useState('all')\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const stakedOnlyInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const hasHarvestPids = [...activeFarms, ...inactiveFarms]\n    .filter(\n      (farm) =>\n        farm.userData &&\n        new BigNumber(farm.userData.miniChefEarnings)\n          .plus(new BigNumber(farm.userData.rewarderEarnings))\n          .isGreaterThan(0),\n    )\n    .map((filteredFarm) => {\n      return filteredFarm.pid\n    })\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const renderFarms = () => {\n    let farms = isActive ? activeFarms : inactiveFarms\n\n    if (urlSearchedFarm) {\n      const farmCheck =\n        activeFarms?.find((farm) => {\n          return farm.pid === urlSearchedFarm\n        }) !== undefined\n      if (farmCheck) {\n        farms = [\n          activeFarms?.find((farm) => {\n            return farm.pid === urlSearchedFarm\n          }),\n          ...activeFarms?.filter((farm) => {\n            return farm.pid !== urlSearchedFarm\n          }),\n        ]\n      }\n    }\n\n    if (query) {\n      farms = farms.filter((farm) => {\n        return `${farm?.stakeTokens?.token0?.symbol}-${farm?.stakeTokens?.token1?.symbol}`\n          .toUpperCase()\n          .includes(query.toUpperCase())\n      })\n    }\n\n    if (stakedOnly) {\n      farms = isActive ? stakedOnlyFarms : stakedOnlyInactiveFarms\n    }\n\n    switch (sortOption) {\n      case 'all':\n        return farmOrderings\n          ? orderBy(\n              farms,\n              (farm: DualFarm) => farmOrderings.find((ordering) => ordering.pid === farm.pid)?.order,\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n      case 'stables':\n        return farms\n          .filter(\n            (farm) =>\n              STABLES.includes(farm.stakeTokens.token0.symbol) && STABLES.includes(farm.stakeTokens.token1.symbol),\n          )\n          .slice(0, numberOfFarmsVisible)\n      case 'apr':\n        return orderBy(farms, (farm) => parseFloat(farm.apy), 'desc').slice(0, numberOfFarmsVisible)\n      case 'hot':\n        return farmTags\n          ? orderBy(\n              farms,\n              (farm: DualFarm) => farmTags?.find((tag) => tag.pid === farm.pid && tag.text.toLowerCase() === 'hot'),\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n      case 'new':\n        return farmTags\n          ? orderBy(\n              farms,\n              (farm: DualFarm) => farmTags?.find((tag) => tag.pid === farm.pid && tag.text.toLowerCase() === 'new'),\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n      case 'blueChips':\n        return farms\n          .filter(\n            (farm) =>\n              BLUE_CHIPS.includes(farm.stakeTokens.token0.symbol) ||\n              BLUE_CHIPS.includes(farm.stakeTokens.token1.symbol),\n          )\n          .slice(0, numberOfFarmsVisible)\n      case 'liquidity':\n        return orderBy(farms, (farm: DualFarm) => parseFloat(farm.totalStaked), 'desc').slice(0, numberOfFarmsVisible)\n      default:\n        return farmOrderings\n          ? orderBy(\n              farms,\n              (farm: DualFarm) => farmOrderings.find((ordering) => ordering.pid === farm.pid)?.order,\n              'asc',\n            ).slice(0, numberOfFarmsVisible)\n          : farms.slice(0, numberOfFarmsVisible)\n    }\n  }\n\n  return (\n    <>\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        mb=\"100px\"\n        style={{ position: 'relative', top: '30px', width: '100%' }}\n      >\n        <ListViewLayout>\n          <Banner\n            banner=\"polygon-farms\"\n            link=\"https://apeswap.gitbook.io/apeswap-finance/product-and-features/stake/farms\"\n            title={t('Polygon Farms')}\n            listViewBreak\n            maxWidth={1130}\n          />\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\n            <ListViewMenu\n              onHandleQueryChange={handleChangeQuery}\n              onSetSortOption={setSortOption}\n              onSetStake={setStakedOnly}\n              harvestAll={<HarvestAllAction pids={hasHarvestPids} disabled={hasHarvestPids.length === 0} />}\n              stakedOnly={stakedOnly}\n              query={query}\n              activeOption={sortOption}\n              showMonkeyImage\n            />\n          </Flex>\n          <DisplayFarms farms={renderFarms()} openPid={urlSearchedFarm} dualFarmTags={farmTags} />\n        </ListViewLayout>\n      </Flex>\n      <div ref={loadMoreRef} />\n    </>\n  )\n}\n\nexport default DualFarms\n"],"sourceRoot":""}